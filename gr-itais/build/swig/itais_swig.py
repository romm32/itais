# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itais_swig
else:
    import _itais_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _itais_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _itais_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _itais_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _itais_swig.high_res_timer_epoch()
class corr_est_cc(object):
    r"""Proxy of C++ gr::itais::corr_est_cc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(symbols: "pmt_vector_cfloat", sps: "float", mark_delay: "unsigned int", threshold: "float"=0.9) -> "gr::itais::corr_est_cc::sptr":
        r"""make(pmt_vector_cfloat symbols, float sps, unsigned int mark_delay, float threshold=0.9) -> corr_est_cc_sptr"""
        return _itais_swig.corr_est_cc_make(symbols, sps, mark_delay, threshold)

    def symbols(self) -> "std::vector< gr_complex,std::allocator< gr_complex > >":
        r"""symbols(corr_est_cc self) -> pmt_vector_cfloat"""
        return _itais_swig.corr_est_cc_symbols(self)

    def set_symbols(self, symbols: "pmt_vector_cfloat") -> "void":
        r"""set_symbols(corr_est_cc self, pmt_vector_cfloat symbols)"""
        return _itais_swig.corr_est_cc_set_symbols(self, symbols)
    __swig_destroy__ = _itais_swig.delete_corr_est_cc

# Register corr_est_cc in _itais_swig:
_itais_swig.corr_est_cc_swigregister(corr_est_cc)

def corr_est_cc_make(symbols: "pmt_vector_cfloat", sps: "float", mark_delay: "unsigned int", threshold: "float"=0.9) -> "gr::itais::corr_est_cc::sptr":
    r"""corr_est_cc_make(pmt_vector_cfloat symbols, float sps, unsigned int mark_delay, float threshold=0.9) -> corr_est_cc_sptr"""
    return _itais_swig.corr_est_cc_make(symbols, sps, mark_delay, threshold)

class corr_est_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::corr_est_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(corr_est_cc_sptr self) -> corr_est_cc_sptr
        __init__(corr_est_cc_sptr self, corr_est_cc p) -> corr_est_cc_sptr
        """
        _itais_swig.corr_est_cc_sptr_swiginit(self, _itais_swig.new_corr_est_cc_sptr(*args))

    def __deref__(self) -> "gr::itais::corr_est_cc *":
        r"""__deref__(corr_est_cc_sptr self) -> corr_est_cc"""
        return _itais_swig.corr_est_cc_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_corr_est_cc_sptr

    def make(self, symbols: "pmt_vector_cfloat", sps: "float", mark_delay: "unsigned int", threshold: "float"=0.9) -> "gr::itais::corr_est_cc::sptr":
        r"""make(corr_est_cc_sptr self, pmt_vector_cfloat symbols, float sps, unsigned int mark_delay, float threshold=0.9) -> corr_est_cc_sptr"""
        return _itais_swig.corr_est_cc_sptr_make(self, symbols, sps, mark_delay, threshold)

    def symbols(self) -> "std::vector< gr_complex,std::allocator< gr_complex > >":
        r"""symbols(corr_est_cc_sptr self) -> pmt_vector_cfloat"""
        return _itais_swig.corr_est_cc_sptr_symbols(self)

    def set_symbols(self, symbols: "pmt_vector_cfloat") -> "void":
        r"""set_symbols(corr_est_cc_sptr self, pmt_vector_cfloat symbols)"""
        return _itais_swig.corr_est_cc_sptr_set_symbols(self, symbols)

    def history(self) -> "unsigned int":
        r"""history(corr_est_cc_sptr self) -> unsigned int"""
        return _itais_swig.corr_est_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(corr_est_cc_sptr self, int which, int delay)
        declare_sample_delay(corr_est_cc_sptr self, unsigned int delay)
        """
        return _itais_swig.corr_est_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(corr_est_cc_sptr self, int which) -> unsigned int"""
        return _itais_swig.corr_est_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(corr_est_cc_sptr self, int multiple)"""
        return _itais_swig.corr_est_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(corr_est_cc_sptr self) -> int"""
        return _itais_swig.corr_est_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(corr_est_cc_sptr self) -> double"""
        return _itais_swig.corr_est_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(corr_est_cc_sptr self) -> uint64_t"""
        return _itais_swig.corr_est_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(corr_est_cc_sptr self) -> uint64_t"""
        return _itais_swig.corr_est_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(corr_est_cc_sptr self) -> bool"""
        return _itais_swig.corr_est_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(corr_est_cc_sptr self) -> bool"""
        return _itais_swig.corr_est_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(corr_est_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.corr_est_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(corr_est_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.corr_est_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(corr_est_cc_sptr self, std::string level)"""
        return _itais_swig.corr_est_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(corr_est_cc_sptr self) -> std::string"""
        return _itais_swig.corr_est_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(corr_est_cc_sptr self) -> int"""
        return _itais_swig.corr_est_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(corr_est_cc_sptr self, int m)"""
        return _itais_swig.corr_est_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(corr_est_cc_sptr self)"""
        return _itais_swig.corr_est_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(corr_est_cc_sptr self) -> bool"""
        return _itais_swig.corr_est_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(corr_est_cc_sptr self, int m)"""
        return _itais_swig.corr_est_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(corr_est_cc_sptr self) -> int"""
        return _itais_swig.corr_est_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(corr_est_cc_sptr self, int i) -> long"""
        return _itais_swig.corr_est_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(corr_est_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(corr_est_cc_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.corr_est_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(corr_est_cc_sptr self, int i) -> long"""
        return _itais_swig.corr_est_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(corr_est_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(corr_est_cc_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.corr_est_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(corr_est_cc_sptr self, int which) -> float
        pc_input_buffers_full(corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.corr_est_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(corr_est_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.corr_est_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(corr_est_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.corr_est_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(corr_est_cc_sptr self, int which) -> float
        pc_output_buffers_full(corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.corr_est_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(corr_est_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.corr_est_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(corr_est_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.corr_est_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(corr_est_cc_sptr self) -> float"""
        return _itais_swig.corr_est_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(corr_est_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.corr_est_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(corr_est_cc_sptr self)"""
        return _itais_swig.corr_est_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(corr_est_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.corr_est_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(corr_est_cc_sptr self) -> int"""
        return _itais_swig.corr_est_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(corr_est_cc_sptr self) -> int"""
        return _itais_swig.corr_est_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(corr_est_cc_sptr self, int priority) -> int"""
        return _itais_swig.corr_est_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(corr_est_cc_sptr self) -> std::string"""
        return _itais_swig.corr_est_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(corr_est_cc_sptr self) -> std::string"""
        return _itais_swig.corr_est_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(corr_est_cc_sptr self) -> io_signature_sptr"""
        return _itais_swig.corr_est_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(corr_est_cc_sptr self) -> io_signature_sptr"""
        return _itais_swig.corr_est_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(corr_est_cc_sptr self) -> long"""
        return _itais_swig.corr_est_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(corr_est_cc_sptr self) -> basic_block_sptr"""
        return _itais_swig.corr_est_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(corr_est_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.corr_est_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(corr_est_cc_sptr self) -> std::string"""
        return _itais_swig.corr_est_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(corr_est_cc_sptr self, std::string name)"""
        return _itais_swig.corr_est_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(corr_est_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.corr_est_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(corr_est_cc_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.corr_est_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(corr_est_cc_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.corr_est_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(corr_est_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.corr_est_cc_sptr_message_subscribers(self, which_port)

# Register corr_est_cc_sptr in _itais_swig:
_itais_swig.corr_est_cc_sptr_swigregister(corr_est_cc_sptr)


corr_est_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
corr_est_cc = corr_est_cc.make;

class freqest(object):
    r"""Proxy of C++ gr::itais::freqest class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(sample_rate: "float", data_rate: "int", fftlen: "int") -> "gr::itais::freqest::sptr":
        r"""make(float sample_rate, int data_rate, int fftlen) -> freqest_sptr"""
        return _itais_swig.freqest_make(sample_rate, data_rate, fftlen)
    __swig_destroy__ = _itais_swig.delete_freqest

# Register freqest in _itais_swig:
_itais_swig.freqest_swigregister(freqest)

def freqest_make(sample_rate: "float", data_rate: "int", fftlen: "int") -> "gr::itais::freqest::sptr":
    r"""freqest_make(float sample_rate, int data_rate, int fftlen) -> freqest_sptr"""
    return _itais_swig.freqest_make(sample_rate, data_rate, fftlen)

class freqest_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::freqest > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(freqest_sptr self) -> freqest_sptr
        __init__(freqest_sptr self, freqest p) -> freqest_sptr
        """
        _itais_swig.freqest_sptr_swiginit(self, _itais_swig.new_freqest_sptr(*args))

    def __deref__(self) -> "gr::itais::freqest *":
        r"""__deref__(freqest_sptr self) -> freqest"""
        return _itais_swig.freqest_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_freqest_sptr

    def make(self, sample_rate: "float", data_rate: "int", fftlen: "int") -> "gr::itais::freqest::sptr":
        r"""make(freqest_sptr self, float sample_rate, int data_rate, int fftlen) -> freqest_sptr"""
        return _itais_swig.freqest_sptr_make(self, sample_rate, data_rate, fftlen)

    def history(self) -> "unsigned int":
        r"""history(freqest_sptr self) -> unsigned int"""
        return _itais_swig.freqest_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(freqest_sptr self, int which, int delay)
        declare_sample_delay(freqest_sptr self, unsigned int delay)
        """
        return _itais_swig.freqest_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(freqest_sptr self, int which) -> unsigned int"""
        return _itais_swig.freqest_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(freqest_sptr self, int multiple)"""
        return _itais_swig.freqest_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(freqest_sptr self) -> int"""
        return _itais_swig.freqest_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(freqest_sptr self) -> double"""
        return _itais_swig.freqest_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(freqest_sptr self) -> uint64_t"""
        return _itais_swig.freqest_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(freqest_sptr self) -> uint64_t"""
        return _itais_swig.freqest_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(freqest_sptr self) -> bool"""
        return _itais_swig.freqest_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(freqest_sptr self) -> bool"""
        return _itais_swig.freqest_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(freqest_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.freqest_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(freqest_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.freqest_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(freqest_sptr self, std::string level)"""
        return _itais_swig.freqest_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(freqest_sptr self) -> std::string"""
        return _itais_swig.freqest_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(freqest_sptr self) -> int"""
        return _itais_swig.freqest_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(freqest_sptr self, int m)"""
        return _itais_swig.freqest_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(freqest_sptr self)"""
        return _itais_swig.freqest_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(freqest_sptr self) -> bool"""
        return _itais_swig.freqest_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(freqest_sptr self, int m)"""
        return _itais_swig.freqest_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(freqest_sptr self) -> int"""
        return _itais_swig.freqest_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(freqest_sptr self, int i) -> long"""
        return _itais_swig.freqest_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(freqest_sptr self, long max_output_buffer)
        set_max_output_buffer(freqest_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.freqest_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(freqest_sptr self, int i) -> long"""
        return _itais_swig.freqest_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(freqest_sptr self, long min_output_buffer)
        set_min_output_buffer(freqest_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.freqest_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(freqest_sptr self, int which) -> float
        pc_input_buffers_full(freqest_sptr self) -> pmt_vector_float
        """
        return _itais_swig.freqest_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(freqest_sptr self, int which) -> float
        pc_input_buffers_full_avg(freqest_sptr self) -> pmt_vector_float
        """
        return _itais_swig.freqest_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(freqest_sptr self, int which) -> float
        pc_input_buffers_full_var(freqest_sptr self) -> pmt_vector_float
        """
        return _itais_swig.freqest_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(freqest_sptr self, int which) -> float
        pc_output_buffers_full(freqest_sptr self) -> pmt_vector_float
        """
        return _itais_swig.freqest_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(freqest_sptr self, int which) -> float
        pc_output_buffers_full_avg(freqest_sptr self) -> pmt_vector_float
        """
        return _itais_swig.freqest_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(freqest_sptr self, int which) -> float
        pc_output_buffers_full_var(freqest_sptr self) -> pmt_vector_float
        """
        return _itais_swig.freqest_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(freqest_sptr self) -> float"""
        return _itais_swig.freqest_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(freqest_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.freqest_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(freqest_sptr self)"""
        return _itais_swig.freqest_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(freqest_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.freqest_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(freqest_sptr self) -> int"""
        return _itais_swig.freqest_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(freqest_sptr self) -> int"""
        return _itais_swig.freqest_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(freqest_sptr self, int priority) -> int"""
        return _itais_swig.freqest_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(freqest_sptr self) -> std::string"""
        return _itais_swig.freqest_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(freqest_sptr self) -> std::string"""
        return _itais_swig.freqest_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(freqest_sptr self) -> io_signature_sptr"""
        return _itais_swig.freqest_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(freqest_sptr self) -> io_signature_sptr"""
        return _itais_swig.freqest_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(freqest_sptr self) -> long"""
        return _itais_swig.freqest_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(freqest_sptr self) -> basic_block_sptr"""
        return _itais_swig.freqest_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(freqest_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.freqest_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(freqest_sptr self) -> std::string"""
        return _itais_swig.freqest_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(freqest_sptr self, std::string name)"""
        return _itais_swig.freqest_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(freqest_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.freqest_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(freqest_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.freqest_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(freqest_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.freqest_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(freqest_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.freqest_sptr_message_subscribers(self, which_port)

# Register freqest_sptr in _itais_swig:
_itais_swig.freqest_sptr_swigregister(freqest_sptr)


freqest_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
freqest = freqest.make;

class invert(object):
    r"""Proxy of C++ gr::itais::invert class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::itais::invert::sptr":
        r"""make() -> invert_sptr"""
        return _itais_swig.invert_make()
    __swig_destroy__ = _itais_swig.delete_invert

# Register invert in _itais_swig:
_itais_swig.invert_swigregister(invert)

def invert_make() -> "gr::itais::invert::sptr":
    r"""invert_make() -> invert_sptr"""
    return _itais_swig.invert_make()

class invert_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::invert > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(invert_sptr self) -> invert_sptr
        __init__(invert_sptr self, invert p) -> invert_sptr
        """
        _itais_swig.invert_sptr_swiginit(self, _itais_swig.new_invert_sptr(*args))

    def __deref__(self) -> "gr::itais::invert *":
        r"""__deref__(invert_sptr self) -> invert"""
        return _itais_swig.invert_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_invert_sptr

    def make(self) -> "gr::itais::invert::sptr":
        r"""make(invert_sptr self) -> invert_sptr"""
        return _itais_swig.invert_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(invert_sptr self) -> unsigned int"""
        return _itais_swig.invert_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(invert_sptr self, int which, int delay)
        declare_sample_delay(invert_sptr self, unsigned int delay)
        """
        return _itais_swig.invert_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(invert_sptr self, int which) -> unsigned int"""
        return _itais_swig.invert_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(invert_sptr self, int multiple)"""
        return _itais_swig.invert_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(invert_sptr self) -> int"""
        return _itais_swig.invert_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(invert_sptr self) -> double"""
        return _itais_swig.invert_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(invert_sptr self) -> uint64_t"""
        return _itais_swig.invert_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(invert_sptr self) -> uint64_t"""
        return _itais_swig.invert_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(invert_sptr self) -> bool"""
        return _itais_swig.invert_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(invert_sptr self) -> bool"""
        return _itais_swig.invert_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(invert_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.invert_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(invert_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.invert_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(invert_sptr self, std::string level)"""
        return _itais_swig.invert_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(invert_sptr self) -> std::string"""
        return _itais_swig.invert_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(invert_sptr self) -> int"""
        return _itais_swig.invert_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(invert_sptr self, int m)"""
        return _itais_swig.invert_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(invert_sptr self)"""
        return _itais_swig.invert_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(invert_sptr self) -> bool"""
        return _itais_swig.invert_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(invert_sptr self, int m)"""
        return _itais_swig.invert_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(invert_sptr self) -> int"""
        return _itais_swig.invert_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(invert_sptr self, int i) -> long"""
        return _itais_swig.invert_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(invert_sptr self, long max_output_buffer)
        set_max_output_buffer(invert_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.invert_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(invert_sptr self, int i) -> long"""
        return _itais_swig.invert_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(invert_sptr self, long min_output_buffer)
        set_min_output_buffer(invert_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.invert_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(invert_sptr self, int which) -> float
        pc_input_buffers_full(invert_sptr self) -> pmt_vector_float
        """
        return _itais_swig.invert_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(invert_sptr self, int which) -> float
        pc_input_buffers_full_avg(invert_sptr self) -> pmt_vector_float
        """
        return _itais_swig.invert_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(invert_sptr self, int which) -> float
        pc_input_buffers_full_var(invert_sptr self) -> pmt_vector_float
        """
        return _itais_swig.invert_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(invert_sptr self, int which) -> float
        pc_output_buffers_full(invert_sptr self) -> pmt_vector_float
        """
        return _itais_swig.invert_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(invert_sptr self, int which) -> float
        pc_output_buffers_full_avg(invert_sptr self) -> pmt_vector_float
        """
        return _itais_swig.invert_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(invert_sptr self, int which) -> float
        pc_output_buffers_full_var(invert_sptr self) -> pmt_vector_float
        """
        return _itais_swig.invert_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(invert_sptr self) -> float"""
        return _itais_swig.invert_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(invert_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.invert_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(invert_sptr self)"""
        return _itais_swig.invert_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(invert_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.invert_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(invert_sptr self) -> int"""
        return _itais_swig.invert_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(invert_sptr self) -> int"""
        return _itais_swig.invert_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(invert_sptr self, int priority) -> int"""
        return _itais_swig.invert_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(invert_sptr self) -> std::string"""
        return _itais_swig.invert_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(invert_sptr self) -> std::string"""
        return _itais_swig.invert_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(invert_sptr self) -> io_signature_sptr"""
        return _itais_swig.invert_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(invert_sptr self) -> io_signature_sptr"""
        return _itais_swig.invert_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(invert_sptr self) -> long"""
        return _itais_swig.invert_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(invert_sptr self) -> basic_block_sptr"""
        return _itais_swig.invert_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(invert_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.invert_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(invert_sptr self) -> std::string"""
        return _itais_swig.invert_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(invert_sptr self, std::string name)"""
        return _itais_swig.invert_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(invert_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.invert_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(invert_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.invert_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(invert_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.invert_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(invert_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.invert_sptr_message_subscribers(self, which_port)

# Register invert_sptr in _itais_swig:
_itais_swig.invert_sptr_swigregister(invert_sptr)


invert_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
invert = invert.make;

class pdu_to_nmea(object):
    r"""Proxy of C++ gr::itais::pdu_to_nmea class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def to_nmea(self, arg2: "swig_pmt_ptr") -> "void":
        r"""to_nmea(pdu_to_nmea self, swig_pmt_ptr arg2)"""
        return _itais_swig.pdu_to_nmea_to_nmea(self, arg2)

    def _print(self, arg2: "swig_pmt_ptr") -> "void":
        r"""
        _print(pdu_to_nmea self, swig_pmt_ptr arg2)
        Write pmt string representation to stdout.
        """
        return _itais_swig.pdu_to_nmea__print(self, arg2)

    @staticmethod
    def make(designator: "std::string") -> "gr::itais::pdu_to_nmea::sptr":
        r"""make(std::string designator) -> pdu_to_nmea_sptr"""
        return _itais_swig.pdu_to_nmea_make(designator)
    __swig_destroy__ = _itais_swig.delete_pdu_to_nmea

# Register pdu_to_nmea in _itais_swig:
_itais_swig.pdu_to_nmea_swigregister(pdu_to_nmea)

def pdu_to_nmea_make(designator: "std::string") -> "gr::itais::pdu_to_nmea::sptr":
    r"""pdu_to_nmea_make(std::string designator) -> pdu_to_nmea_sptr"""
    return _itais_swig.pdu_to_nmea_make(designator)

class pdu_to_nmea_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::pdu_to_nmea > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pdu_to_nmea_sptr self) -> pdu_to_nmea_sptr
        __init__(pdu_to_nmea_sptr self, pdu_to_nmea p) -> pdu_to_nmea_sptr
        """
        _itais_swig.pdu_to_nmea_sptr_swiginit(self, _itais_swig.new_pdu_to_nmea_sptr(*args))

    def __deref__(self) -> "gr::itais::pdu_to_nmea *":
        r"""__deref__(pdu_to_nmea_sptr self) -> pdu_to_nmea"""
        return _itais_swig.pdu_to_nmea_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_pdu_to_nmea_sptr

    def to_nmea(self, arg2: "swig_pmt_ptr") -> "void":
        r"""to_nmea(pdu_to_nmea_sptr self, swig_pmt_ptr arg2)"""
        return _itais_swig.pdu_to_nmea_sptr_to_nmea(self, arg2)

    def _print(self, arg2: "swig_pmt_ptr") -> "void":
        r"""
        _print(pdu_to_nmea_sptr self, swig_pmt_ptr arg2)
        Write pmt string representation to stdout.
        """
        return _itais_swig.pdu_to_nmea_sptr__print(self, arg2)

    def make(self, designator: "std::string") -> "gr::itais::pdu_to_nmea::sptr":
        r"""make(pdu_to_nmea_sptr self, std::string designator) -> pdu_to_nmea_sptr"""
        return _itais_swig.pdu_to_nmea_sptr_make(self, designator)

    def history(self) -> "unsigned int":
        r"""history(pdu_to_nmea_sptr self) -> unsigned int"""
        return _itais_swig.pdu_to_nmea_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(pdu_to_nmea_sptr self, int which, int delay)
        declare_sample_delay(pdu_to_nmea_sptr self, unsigned int delay)
        """
        return _itais_swig.pdu_to_nmea_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(pdu_to_nmea_sptr self, int which) -> unsigned int"""
        return _itais_swig.pdu_to_nmea_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(pdu_to_nmea_sptr self, int multiple)"""
        return _itais_swig.pdu_to_nmea_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(pdu_to_nmea_sptr self) -> int"""
        return _itais_swig.pdu_to_nmea_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(pdu_to_nmea_sptr self) -> double"""
        return _itais_swig.pdu_to_nmea_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(pdu_to_nmea_sptr self) -> uint64_t"""
        return _itais_swig.pdu_to_nmea_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(pdu_to_nmea_sptr self) -> uint64_t"""
        return _itais_swig.pdu_to_nmea_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(pdu_to_nmea_sptr self) -> bool"""
        return _itais_swig.pdu_to_nmea_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(pdu_to_nmea_sptr self) -> bool"""
        return _itais_swig.pdu_to_nmea_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(pdu_to_nmea_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.pdu_to_nmea_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(pdu_to_nmea_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.pdu_to_nmea_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(pdu_to_nmea_sptr self, std::string level)"""
        return _itais_swig.pdu_to_nmea_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(pdu_to_nmea_sptr self) -> std::string"""
        return _itais_swig.pdu_to_nmea_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(pdu_to_nmea_sptr self) -> int"""
        return _itais_swig.pdu_to_nmea_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(pdu_to_nmea_sptr self, int m)"""
        return _itais_swig.pdu_to_nmea_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(pdu_to_nmea_sptr self)"""
        return _itais_swig.pdu_to_nmea_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(pdu_to_nmea_sptr self) -> bool"""
        return _itais_swig.pdu_to_nmea_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(pdu_to_nmea_sptr self, int m)"""
        return _itais_swig.pdu_to_nmea_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(pdu_to_nmea_sptr self) -> int"""
        return _itais_swig.pdu_to_nmea_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(pdu_to_nmea_sptr self, int i) -> long"""
        return _itais_swig.pdu_to_nmea_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(pdu_to_nmea_sptr self, long max_output_buffer)
        set_max_output_buffer(pdu_to_nmea_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.pdu_to_nmea_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(pdu_to_nmea_sptr self, int i) -> long"""
        return _itais_swig.pdu_to_nmea_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(pdu_to_nmea_sptr self, long min_output_buffer)
        set_min_output_buffer(pdu_to_nmea_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.pdu_to_nmea_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(pdu_to_nmea_sptr self, int which) -> float
        pc_input_buffers_full(pdu_to_nmea_sptr self) -> pmt_vector_float
        """
        return _itais_swig.pdu_to_nmea_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(pdu_to_nmea_sptr self, int which) -> float
        pc_input_buffers_full_avg(pdu_to_nmea_sptr self) -> pmt_vector_float
        """
        return _itais_swig.pdu_to_nmea_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(pdu_to_nmea_sptr self, int which) -> float
        pc_input_buffers_full_var(pdu_to_nmea_sptr self) -> pmt_vector_float
        """
        return _itais_swig.pdu_to_nmea_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(pdu_to_nmea_sptr self, int which) -> float
        pc_output_buffers_full(pdu_to_nmea_sptr self) -> pmt_vector_float
        """
        return _itais_swig.pdu_to_nmea_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(pdu_to_nmea_sptr self, int which) -> float
        pc_output_buffers_full_avg(pdu_to_nmea_sptr self) -> pmt_vector_float
        """
        return _itais_swig.pdu_to_nmea_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(pdu_to_nmea_sptr self, int which) -> float
        pc_output_buffers_full_var(pdu_to_nmea_sptr self) -> pmt_vector_float
        """
        return _itais_swig.pdu_to_nmea_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(pdu_to_nmea_sptr self) -> float"""
        return _itais_swig.pdu_to_nmea_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(pdu_to_nmea_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.pdu_to_nmea_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(pdu_to_nmea_sptr self)"""
        return _itais_swig.pdu_to_nmea_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(pdu_to_nmea_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.pdu_to_nmea_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(pdu_to_nmea_sptr self) -> int"""
        return _itais_swig.pdu_to_nmea_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(pdu_to_nmea_sptr self) -> int"""
        return _itais_swig.pdu_to_nmea_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(pdu_to_nmea_sptr self, int priority) -> int"""
        return _itais_swig.pdu_to_nmea_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(pdu_to_nmea_sptr self) -> std::string"""
        return _itais_swig.pdu_to_nmea_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(pdu_to_nmea_sptr self) -> std::string"""
        return _itais_swig.pdu_to_nmea_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(pdu_to_nmea_sptr self) -> io_signature_sptr"""
        return _itais_swig.pdu_to_nmea_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(pdu_to_nmea_sptr self) -> io_signature_sptr"""
        return _itais_swig.pdu_to_nmea_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(pdu_to_nmea_sptr self) -> long"""
        return _itais_swig.pdu_to_nmea_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(pdu_to_nmea_sptr self) -> basic_block_sptr"""
        return _itais_swig.pdu_to_nmea_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(pdu_to_nmea_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.pdu_to_nmea_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(pdu_to_nmea_sptr self) -> std::string"""
        return _itais_swig.pdu_to_nmea_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(pdu_to_nmea_sptr self, std::string name)"""
        return _itais_swig.pdu_to_nmea_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(pdu_to_nmea_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.pdu_to_nmea_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(pdu_to_nmea_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.pdu_to_nmea_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(pdu_to_nmea_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.pdu_to_nmea_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(pdu_to_nmea_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.pdu_to_nmea_sptr_message_subscribers(self, which_port)

# Register pdu_to_nmea_sptr in _itais_swig:
_itais_swig.pdu_to_nmea_sptr_swigregister(pdu_to_nmea_sptr)


pdu_to_nmea_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pdu_to_nmea = pdu_to_nmea.make;

class msk_timing_recovery_cc(object):
    r"""Proxy of C++ gr::itais::msk_timing_recovery_cc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(sps: "float", gain: "float", limit: "float", osps: "int") -> "gr::itais::msk_timing_recovery_cc::sptr":
        r"""make(float sps, float gain, float limit, int osps) -> msk_timing_recovery_cc_sptr"""
        return _itais_swig.msk_timing_recovery_cc_make(sps, gain, limit, osps)

    def set_gain(self, gain: "float") -> "void":
        r"""set_gain(msk_timing_recovery_cc self, float gain)"""
        return _itais_swig.msk_timing_recovery_cc_set_gain(self, gain)

    def get_gain(self) -> "float":
        r"""get_gain(msk_timing_recovery_cc self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_get_gain(self)

    def set_limit(self, limit: "float") -> "void":
        r"""set_limit(msk_timing_recovery_cc self, float limit)"""
        return _itais_swig.msk_timing_recovery_cc_set_limit(self, limit)

    def get_limit(self) -> "float":
        r"""get_limit(msk_timing_recovery_cc self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_get_limit(self)

    def set_sps(self, sps: "float") -> "void":
        r"""set_sps(msk_timing_recovery_cc self, float sps)"""
        return _itais_swig.msk_timing_recovery_cc_set_sps(self, sps)

    def get_sps(self) -> "float":
        r"""get_sps(msk_timing_recovery_cc self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_get_sps(self)
    __swig_destroy__ = _itais_swig.delete_msk_timing_recovery_cc

# Register msk_timing_recovery_cc in _itais_swig:
_itais_swig.msk_timing_recovery_cc_swigregister(msk_timing_recovery_cc)

def msk_timing_recovery_cc_make(sps: "float", gain: "float", limit: "float", osps: "int") -> "gr::itais::msk_timing_recovery_cc::sptr":
    r"""msk_timing_recovery_cc_make(float sps, float gain, float limit, int osps) -> msk_timing_recovery_cc_sptr"""
    return _itais_swig.msk_timing_recovery_cc_make(sps, gain, limit, osps)

class msk_timing_recovery_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::msk_timing_recovery_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(msk_timing_recovery_cc_sptr self) -> msk_timing_recovery_cc_sptr
        __init__(msk_timing_recovery_cc_sptr self, msk_timing_recovery_cc p) -> msk_timing_recovery_cc_sptr
        """
        _itais_swig.msk_timing_recovery_cc_sptr_swiginit(self, _itais_swig.new_msk_timing_recovery_cc_sptr(*args))

    def __deref__(self) -> "gr::itais::msk_timing_recovery_cc *":
        r"""__deref__(msk_timing_recovery_cc_sptr self) -> msk_timing_recovery_cc"""
        return _itais_swig.msk_timing_recovery_cc_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_msk_timing_recovery_cc_sptr

    def make(self, sps: "float", gain: "float", limit: "float", osps: "int") -> "gr::itais::msk_timing_recovery_cc::sptr":
        r"""make(msk_timing_recovery_cc_sptr self, float sps, float gain, float limit, int osps) -> msk_timing_recovery_cc_sptr"""
        return _itais_swig.msk_timing_recovery_cc_sptr_make(self, sps, gain, limit, osps)

    def set_gain(self, gain: "float") -> "void":
        r"""set_gain(msk_timing_recovery_cc_sptr self, float gain)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_gain(self, gain)

    def get_gain(self) -> "float":
        r"""get_gain(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_get_gain(self)

    def set_limit(self, limit: "float") -> "void":
        r"""set_limit(msk_timing_recovery_cc_sptr self, float limit)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_limit(self, limit)

    def get_limit(self) -> "float":
        r"""get_limit(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_get_limit(self)

    def set_sps(self, sps: "float") -> "void":
        r"""set_sps(msk_timing_recovery_cc_sptr self, float sps)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_sps(self, sps)

    def get_sps(self) -> "float":
        r"""get_sps(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_get_sps(self)

    def history(self) -> "unsigned int":
        r"""history(msk_timing_recovery_cc_sptr self) -> unsigned int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(msk_timing_recovery_cc_sptr self, int which, int delay)
        declare_sample_delay(msk_timing_recovery_cc_sptr self, unsigned int delay)
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(msk_timing_recovery_cc_sptr self, int which) -> unsigned int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(msk_timing_recovery_cc_sptr self, int multiple)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(msk_timing_recovery_cc_sptr self) -> int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(msk_timing_recovery_cc_sptr self) -> double"""
        return _itais_swig.msk_timing_recovery_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(msk_timing_recovery_cc_sptr self) -> uint64_t"""
        return _itais_swig.msk_timing_recovery_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(msk_timing_recovery_cc_sptr self) -> uint64_t"""
        return _itais_swig.msk_timing_recovery_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(msk_timing_recovery_cc_sptr self) -> bool"""
        return _itais_swig.msk_timing_recovery_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(msk_timing_recovery_cc_sptr self) -> bool"""
        return _itais_swig.msk_timing_recovery_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(msk_timing_recovery_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.msk_timing_recovery_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(msk_timing_recovery_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.msk_timing_recovery_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(msk_timing_recovery_cc_sptr self, std::string level)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(msk_timing_recovery_cc_sptr self) -> std::string"""
        return _itais_swig.msk_timing_recovery_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(msk_timing_recovery_cc_sptr self) -> int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(msk_timing_recovery_cc_sptr self, int m)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(msk_timing_recovery_cc_sptr self)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(msk_timing_recovery_cc_sptr self) -> bool"""
        return _itais_swig.msk_timing_recovery_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(msk_timing_recovery_cc_sptr self, int m)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(msk_timing_recovery_cc_sptr self) -> int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(msk_timing_recovery_cc_sptr self, int i) -> long"""
        return _itais_swig.msk_timing_recovery_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(msk_timing_recovery_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(msk_timing_recovery_cc_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(msk_timing_recovery_cc_sptr self, int i) -> long"""
        return _itais_swig.msk_timing_recovery_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(msk_timing_recovery_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(msk_timing_recovery_cc_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(msk_timing_recovery_cc_sptr self, int which) -> float
        pc_input_buffers_full(msk_timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(msk_timing_recovery_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(msk_timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(msk_timing_recovery_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(msk_timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(msk_timing_recovery_cc_sptr self, int which) -> float
        pc_output_buffers_full(msk_timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(msk_timing_recovery_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(msk_timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(msk_timing_recovery_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(msk_timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(msk_timing_recovery_cc_sptr self) -> float"""
        return _itais_swig.msk_timing_recovery_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(msk_timing_recovery_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(msk_timing_recovery_cc_sptr self)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(msk_timing_recovery_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.msk_timing_recovery_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(msk_timing_recovery_cc_sptr self) -> int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(msk_timing_recovery_cc_sptr self) -> int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(msk_timing_recovery_cc_sptr self, int priority) -> int"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(msk_timing_recovery_cc_sptr self) -> std::string"""
        return _itais_swig.msk_timing_recovery_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(msk_timing_recovery_cc_sptr self) -> std::string"""
        return _itais_swig.msk_timing_recovery_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(msk_timing_recovery_cc_sptr self) -> io_signature_sptr"""
        return _itais_swig.msk_timing_recovery_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(msk_timing_recovery_cc_sptr self) -> io_signature_sptr"""
        return _itais_swig.msk_timing_recovery_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(msk_timing_recovery_cc_sptr self) -> long"""
        return _itais_swig.msk_timing_recovery_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(msk_timing_recovery_cc_sptr self) -> basic_block_sptr"""
        return _itais_swig.msk_timing_recovery_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(msk_timing_recovery_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.msk_timing_recovery_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(msk_timing_recovery_cc_sptr self) -> std::string"""
        return _itais_swig.msk_timing_recovery_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(msk_timing_recovery_cc_sptr self, std::string name)"""
        return _itais_swig.msk_timing_recovery_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(msk_timing_recovery_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.msk_timing_recovery_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(msk_timing_recovery_cc_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.msk_timing_recovery_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(msk_timing_recovery_cc_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.msk_timing_recovery_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(msk_timing_recovery_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.msk_timing_recovery_cc_sptr_message_subscribers(self, which_port)

# Register msk_timing_recovery_cc_sptr in _itais_swig:
_itais_swig.msk_timing_recovery_cc_sptr_swigregister(msk_timing_recovery_cc_sptr)


msk_timing_recovery_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
msk_timing_recovery_cc = msk_timing_recovery_cc.make;

class Build_Frame(object):
    r"""Proxy of C++ gr::itais::Build_Frame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::itais::Build_Frame::sptr":
        r"""make(bool repeat, bool enable_NRZI, std::string const & lengthtagname="packet_len") -> Build_Frame_sptr"""
        return _itais_swig.Build_Frame_make(*args, **kwargs)
    __swig_destroy__ = _itais_swig.delete_Build_Frame

# Register Build_Frame in _itais_swig:
_itais_swig.Build_Frame_swigregister(Build_Frame)

def Build_Frame_make(*args, **kwargs) -> "gr::itais::Build_Frame::sptr":
    r"""Build_Frame_make(bool repeat, bool enable_NRZI, std::string const & lengthtagname="packet_len") -> Build_Frame_sptr"""
    return _itais_swig.Build_Frame_make(*args, **kwargs)

class Build_Frame_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::Build_Frame > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Build_Frame_sptr self) -> Build_Frame_sptr
        __init__(Build_Frame_sptr self, Build_Frame p) -> Build_Frame_sptr
        """
        _itais_swig.Build_Frame_sptr_swiginit(self, _itais_swig.new_Build_Frame_sptr(*args))

    def __deref__(self) -> "gr::itais::Build_Frame *":
        r"""__deref__(Build_Frame_sptr self) -> Build_Frame"""
        return _itais_swig.Build_Frame_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_Build_Frame_sptr

    def make(self, *args, **kwargs) -> "gr::itais::Build_Frame::sptr":
        r"""make(Build_Frame_sptr self, bool repeat, bool enable_NRZI, std::string const & lengthtagname="packet_len") -> Build_Frame_sptr"""
        return _itais_swig.Build_Frame_sptr_make(self, *args, **kwargs)

    def history(self) -> "unsigned int":
        r"""history(Build_Frame_sptr self) -> unsigned int"""
        return _itais_swig.Build_Frame_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(Build_Frame_sptr self, int which, int delay)
        declare_sample_delay(Build_Frame_sptr self, unsigned int delay)
        """
        return _itais_swig.Build_Frame_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(Build_Frame_sptr self, int which) -> unsigned int"""
        return _itais_swig.Build_Frame_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(Build_Frame_sptr self, int multiple)"""
        return _itais_swig.Build_Frame_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(Build_Frame_sptr self) -> int"""
        return _itais_swig.Build_Frame_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(Build_Frame_sptr self) -> double"""
        return _itais_swig.Build_Frame_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(Build_Frame_sptr self) -> uint64_t"""
        return _itais_swig.Build_Frame_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(Build_Frame_sptr self) -> uint64_t"""
        return _itais_swig.Build_Frame_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(Build_Frame_sptr self) -> bool"""
        return _itais_swig.Build_Frame_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(Build_Frame_sptr self) -> bool"""
        return _itais_swig.Build_Frame_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(Build_Frame_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.Build_Frame_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(Build_Frame_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.Build_Frame_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(Build_Frame_sptr self, std::string level)"""
        return _itais_swig.Build_Frame_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(Build_Frame_sptr self) -> std::string"""
        return _itais_swig.Build_Frame_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(Build_Frame_sptr self) -> int"""
        return _itais_swig.Build_Frame_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(Build_Frame_sptr self, int m)"""
        return _itais_swig.Build_Frame_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(Build_Frame_sptr self)"""
        return _itais_swig.Build_Frame_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(Build_Frame_sptr self) -> bool"""
        return _itais_swig.Build_Frame_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(Build_Frame_sptr self, int m)"""
        return _itais_swig.Build_Frame_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(Build_Frame_sptr self) -> int"""
        return _itais_swig.Build_Frame_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(Build_Frame_sptr self, int i) -> long"""
        return _itais_swig.Build_Frame_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(Build_Frame_sptr self, long max_output_buffer)
        set_max_output_buffer(Build_Frame_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.Build_Frame_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(Build_Frame_sptr self, int i) -> long"""
        return _itais_swig.Build_Frame_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(Build_Frame_sptr self, long min_output_buffer)
        set_min_output_buffer(Build_Frame_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.Build_Frame_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(Build_Frame_sptr self, int which) -> float
        pc_input_buffers_full(Build_Frame_sptr self) -> pmt_vector_float
        """
        return _itais_swig.Build_Frame_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(Build_Frame_sptr self, int which) -> float
        pc_input_buffers_full_avg(Build_Frame_sptr self) -> pmt_vector_float
        """
        return _itais_swig.Build_Frame_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(Build_Frame_sptr self, int which) -> float
        pc_input_buffers_full_var(Build_Frame_sptr self) -> pmt_vector_float
        """
        return _itais_swig.Build_Frame_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(Build_Frame_sptr self, int which) -> float
        pc_output_buffers_full(Build_Frame_sptr self) -> pmt_vector_float
        """
        return _itais_swig.Build_Frame_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(Build_Frame_sptr self, int which) -> float
        pc_output_buffers_full_avg(Build_Frame_sptr self) -> pmt_vector_float
        """
        return _itais_swig.Build_Frame_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(Build_Frame_sptr self, int which) -> float
        pc_output_buffers_full_var(Build_Frame_sptr self) -> pmt_vector_float
        """
        return _itais_swig.Build_Frame_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(Build_Frame_sptr self) -> float"""
        return _itais_swig.Build_Frame_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(Build_Frame_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.Build_Frame_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(Build_Frame_sptr self)"""
        return _itais_swig.Build_Frame_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(Build_Frame_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.Build_Frame_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(Build_Frame_sptr self) -> int"""
        return _itais_swig.Build_Frame_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(Build_Frame_sptr self) -> int"""
        return _itais_swig.Build_Frame_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(Build_Frame_sptr self, int priority) -> int"""
        return _itais_swig.Build_Frame_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(Build_Frame_sptr self) -> std::string"""
        return _itais_swig.Build_Frame_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(Build_Frame_sptr self) -> std::string"""
        return _itais_swig.Build_Frame_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(Build_Frame_sptr self) -> io_signature_sptr"""
        return _itais_swig.Build_Frame_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(Build_Frame_sptr self) -> io_signature_sptr"""
        return _itais_swig.Build_Frame_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(Build_Frame_sptr self) -> long"""
        return _itais_swig.Build_Frame_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(Build_Frame_sptr self) -> basic_block_sptr"""
        return _itais_swig.Build_Frame_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(Build_Frame_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.Build_Frame_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(Build_Frame_sptr self) -> std::string"""
        return _itais_swig.Build_Frame_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(Build_Frame_sptr self, std::string name)"""
        return _itais_swig.Build_Frame_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(Build_Frame_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.Build_Frame_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(Build_Frame_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.Build_Frame_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(Build_Frame_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.Build_Frame_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(Build_Frame_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.Build_Frame_sptr_message_subscribers(self, which_port)

# Register Build_Frame_sptr in _itais_swig:
_itais_swig.Build_Frame_sptr_swigregister(Build_Frame_sptr)


Build_Frame_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Build_Frame = Build_Frame.make;

class nrz_to_nrzi(object):
    r"""Proxy of C++ gr::itais::nrz_to_nrzi class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::itais::nrz_to_nrzi::sptr":
        r"""make() -> nrz_to_nrzi_sptr"""
        return _itais_swig.nrz_to_nrzi_make()
    __swig_destroy__ = _itais_swig.delete_nrz_to_nrzi

# Register nrz_to_nrzi in _itais_swig:
_itais_swig.nrz_to_nrzi_swigregister(nrz_to_nrzi)

def nrz_to_nrzi_make() -> "gr::itais::nrz_to_nrzi::sptr":
    r"""nrz_to_nrzi_make() -> nrz_to_nrzi_sptr"""
    return _itais_swig.nrz_to_nrzi_make()

class nrz_to_nrzi_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::nrz_to_nrzi > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(nrz_to_nrzi_sptr self) -> nrz_to_nrzi_sptr
        __init__(nrz_to_nrzi_sptr self, nrz_to_nrzi p) -> nrz_to_nrzi_sptr
        """
        _itais_swig.nrz_to_nrzi_sptr_swiginit(self, _itais_swig.new_nrz_to_nrzi_sptr(*args))

    def __deref__(self) -> "gr::itais::nrz_to_nrzi *":
        r"""__deref__(nrz_to_nrzi_sptr self) -> nrz_to_nrzi"""
        return _itais_swig.nrz_to_nrzi_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_nrz_to_nrzi_sptr

    def make(self) -> "gr::itais::nrz_to_nrzi::sptr":
        r"""make(nrz_to_nrzi_sptr self) -> nrz_to_nrzi_sptr"""
        return _itais_swig.nrz_to_nrzi_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(nrz_to_nrzi_sptr self) -> unsigned int"""
        return _itais_swig.nrz_to_nrzi_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(nrz_to_nrzi_sptr self, int which, int delay)
        declare_sample_delay(nrz_to_nrzi_sptr self, unsigned int delay)
        """
        return _itais_swig.nrz_to_nrzi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(nrz_to_nrzi_sptr self, int which) -> unsigned int"""
        return _itais_swig.nrz_to_nrzi_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(nrz_to_nrzi_sptr self, int multiple)"""
        return _itais_swig.nrz_to_nrzi_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(nrz_to_nrzi_sptr self) -> int"""
        return _itais_swig.nrz_to_nrzi_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(nrz_to_nrzi_sptr self) -> double"""
        return _itais_swig.nrz_to_nrzi_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(nrz_to_nrzi_sptr self) -> uint64_t"""
        return _itais_swig.nrz_to_nrzi_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(nrz_to_nrzi_sptr self) -> uint64_t"""
        return _itais_swig.nrz_to_nrzi_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(nrz_to_nrzi_sptr self) -> bool"""
        return _itais_swig.nrz_to_nrzi_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(nrz_to_nrzi_sptr self) -> bool"""
        return _itais_swig.nrz_to_nrzi_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(nrz_to_nrzi_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.nrz_to_nrzi_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(nrz_to_nrzi_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.nrz_to_nrzi_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(nrz_to_nrzi_sptr self, std::string level)"""
        return _itais_swig.nrz_to_nrzi_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(nrz_to_nrzi_sptr self) -> std::string"""
        return _itais_swig.nrz_to_nrzi_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(nrz_to_nrzi_sptr self) -> int"""
        return _itais_swig.nrz_to_nrzi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(nrz_to_nrzi_sptr self, int m)"""
        return _itais_swig.nrz_to_nrzi_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(nrz_to_nrzi_sptr self)"""
        return _itais_swig.nrz_to_nrzi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(nrz_to_nrzi_sptr self) -> bool"""
        return _itais_swig.nrz_to_nrzi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(nrz_to_nrzi_sptr self, int m)"""
        return _itais_swig.nrz_to_nrzi_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(nrz_to_nrzi_sptr self) -> int"""
        return _itais_swig.nrz_to_nrzi_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(nrz_to_nrzi_sptr self, int i) -> long"""
        return _itais_swig.nrz_to_nrzi_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(nrz_to_nrzi_sptr self, long max_output_buffer)
        set_max_output_buffer(nrz_to_nrzi_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.nrz_to_nrzi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(nrz_to_nrzi_sptr self, int i) -> long"""
        return _itais_swig.nrz_to_nrzi_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(nrz_to_nrzi_sptr self, long min_output_buffer)
        set_min_output_buffer(nrz_to_nrzi_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.nrz_to_nrzi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(nrz_to_nrzi_sptr self, int which) -> float
        pc_input_buffers_full(nrz_to_nrzi_sptr self) -> pmt_vector_float
        """
        return _itais_swig.nrz_to_nrzi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(nrz_to_nrzi_sptr self, int which) -> float
        pc_input_buffers_full_avg(nrz_to_nrzi_sptr self) -> pmt_vector_float
        """
        return _itais_swig.nrz_to_nrzi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(nrz_to_nrzi_sptr self, int which) -> float
        pc_input_buffers_full_var(nrz_to_nrzi_sptr self) -> pmt_vector_float
        """
        return _itais_swig.nrz_to_nrzi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(nrz_to_nrzi_sptr self, int which) -> float
        pc_output_buffers_full(nrz_to_nrzi_sptr self) -> pmt_vector_float
        """
        return _itais_swig.nrz_to_nrzi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(nrz_to_nrzi_sptr self, int which) -> float
        pc_output_buffers_full_avg(nrz_to_nrzi_sptr self) -> pmt_vector_float
        """
        return _itais_swig.nrz_to_nrzi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(nrz_to_nrzi_sptr self, int which) -> float
        pc_output_buffers_full_var(nrz_to_nrzi_sptr self) -> pmt_vector_float
        """
        return _itais_swig.nrz_to_nrzi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(nrz_to_nrzi_sptr self) -> float"""
        return _itais_swig.nrz_to_nrzi_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(nrz_to_nrzi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.nrz_to_nrzi_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(nrz_to_nrzi_sptr self)"""
        return _itais_swig.nrz_to_nrzi_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(nrz_to_nrzi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.nrz_to_nrzi_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(nrz_to_nrzi_sptr self) -> int"""
        return _itais_swig.nrz_to_nrzi_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(nrz_to_nrzi_sptr self) -> int"""
        return _itais_swig.nrz_to_nrzi_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(nrz_to_nrzi_sptr self, int priority) -> int"""
        return _itais_swig.nrz_to_nrzi_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(nrz_to_nrzi_sptr self) -> std::string"""
        return _itais_swig.nrz_to_nrzi_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(nrz_to_nrzi_sptr self) -> std::string"""
        return _itais_swig.nrz_to_nrzi_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(nrz_to_nrzi_sptr self) -> io_signature_sptr"""
        return _itais_swig.nrz_to_nrzi_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(nrz_to_nrzi_sptr self) -> io_signature_sptr"""
        return _itais_swig.nrz_to_nrzi_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(nrz_to_nrzi_sptr self) -> long"""
        return _itais_swig.nrz_to_nrzi_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(nrz_to_nrzi_sptr self) -> basic_block_sptr"""
        return _itais_swig.nrz_to_nrzi_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(nrz_to_nrzi_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.nrz_to_nrzi_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(nrz_to_nrzi_sptr self) -> std::string"""
        return _itais_swig.nrz_to_nrzi_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(nrz_to_nrzi_sptr self, std::string name)"""
        return _itais_swig.nrz_to_nrzi_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(nrz_to_nrzi_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.nrz_to_nrzi_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(nrz_to_nrzi_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.nrz_to_nrzi_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(nrz_to_nrzi_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.nrz_to_nrzi_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(nrz_to_nrzi_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.nrz_to_nrzi_sptr_message_subscribers(self, which_port)

# Register nrz_to_nrzi_sptr in _itais_swig:
_itais_swig.nrz_to_nrzi_sptr_swigregister(nrz_to_nrzi_sptr)


nrz_to_nrzi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
nrz_to_nrzi = nrz_to_nrzi.make;

class DebugME(object):
    r"""Proxy of C++ gr::itais::DebugME class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(itemsize: "size_t") -> "gr::itais::DebugME::sptr":
        r"""make(size_t itemsize) -> DebugME_sptr"""
        return _itais_swig.DebugME_make(itemsize)
    __swig_destroy__ = _itais_swig.delete_DebugME

# Register DebugME in _itais_swig:
_itais_swig.DebugME_swigregister(DebugME)

def DebugME_make(itemsize: "size_t") -> "gr::itais::DebugME::sptr":
    r"""DebugME_make(size_t itemsize) -> DebugME_sptr"""
    return _itais_swig.DebugME_make(itemsize)

class DebugME_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::DebugME > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DebugME_sptr self) -> DebugME_sptr
        __init__(DebugME_sptr self, DebugME p) -> DebugME_sptr
        """
        _itais_swig.DebugME_sptr_swiginit(self, _itais_swig.new_DebugME_sptr(*args))

    def __deref__(self) -> "gr::itais::DebugME *":
        r"""__deref__(DebugME_sptr self) -> DebugME"""
        return _itais_swig.DebugME_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_DebugME_sptr

    def make(self, itemsize: "size_t") -> "gr::itais::DebugME::sptr":
        r"""make(DebugME_sptr self, size_t itemsize) -> DebugME_sptr"""
        return _itais_swig.DebugME_sptr_make(self, itemsize)

    def history(self) -> "unsigned int":
        r"""history(DebugME_sptr self) -> unsigned int"""
        return _itais_swig.DebugME_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(DebugME_sptr self, int which, int delay)
        declare_sample_delay(DebugME_sptr self, unsigned int delay)
        """
        return _itais_swig.DebugME_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(DebugME_sptr self, int which) -> unsigned int"""
        return _itais_swig.DebugME_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(DebugME_sptr self, int multiple)"""
        return _itais_swig.DebugME_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(DebugME_sptr self) -> int"""
        return _itais_swig.DebugME_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(DebugME_sptr self) -> double"""
        return _itais_swig.DebugME_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(DebugME_sptr self) -> uint64_t"""
        return _itais_swig.DebugME_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(DebugME_sptr self) -> uint64_t"""
        return _itais_swig.DebugME_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(DebugME_sptr self) -> bool"""
        return _itais_swig.DebugME_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(DebugME_sptr self) -> bool"""
        return _itais_swig.DebugME_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(DebugME_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.DebugME_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(DebugME_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.DebugME_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(DebugME_sptr self, std::string level)"""
        return _itais_swig.DebugME_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(DebugME_sptr self) -> std::string"""
        return _itais_swig.DebugME_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(DebugME_sptr self) -> int"""
        return _itais_swig.DebugME_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(DebugME_sptr self, int m)"""
        return _itais_swig.DebugME_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(DebugME_sptr self)"""
        return _itais_swig.DebugME_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(DebugME_sptr self) -> bool"""
        return _itais_swig.DebugME_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(DebugME_sptr self, int m)"""
        return _itais_swig.DebugME_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(DebugME_sptr self) -> int"""
        return _itais_swig.DebugME_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(DebugME_sptr self, int i) -> long"""
        return _itais_swig.DebugME_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(DebugME_sptr self, long max_output_buffer)
        set_max_output_buffer(DebugME_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.DebugME_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(DebugME_sptr self, int i) -> long"""
        return _itais_swig.DebugME_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(DebugME_sptr self, long min_output_buffer)
        set_min_output_buffer(DebugME_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.DebugME_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(DebugME_sptr self, int which) -> float
        pc_input_buffers_full(DebugME_sptr self) -> pmt_vector_float
        """
        return _itais_swig.DebugME_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(DebugME_sptr self, int which) -> float
        pc_input_buffers_full_avg(DebugME_sptr self) -> pmt_vector_float
        """
        return _itais_swig.DebugME_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(DebugME_sptr self, int which) -> float
        pc_input_buffers_full_var(DebugME_sptr self) -> pmt_vector_float
        """
        return _itais_swig.DebugME_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(DebugME_sptr self, int which) -> float
        pc_output_buffers_full(DebugME_sptr self) -> pmt_vector_float
        """
        return _itais_swig.DebugME_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(DebugME_sptr self, int which) -> float
        pc_output_buffers_full_avg(DebugME_sptr self) -> pmt_vector_float
        """
        return _itais_swig.DebugME_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(DebugME_sptr self, int which) -> float
        pc_output_buffers_full_var(DebugME_sptr self) -> pmt_vector_float
        """
        return _itais_swig.DebugME_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(DebugME_sptr self) -> float"""
        return _itais_swig.DebugME_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(DebugME_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.DebugME_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(DebugME_sptr self)"""
        return _itais_swig.DebugME_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(DebugME_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.DebugME_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(DebugME_sptr self) -> int"""
        return _itais_swig.DebugME_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(DebugME_sptr self) -> int"""
        return _itais_swig.DebugME_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(DebugME_sptr self, int priority) -> int"""
        return _itais_swig.DebugME_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(DebugME_sptr self) -> std::string"""
        return _itais_swig.DebugME_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(DebugME_sptr self) -> std::string"""
        return _itais_swig.DebugME_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(DebugME_sptr self) -> io_signature_sptr"""
        return _itais_swig.DebugME_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(DebugME_sptr self) -> io_signature_sptr"""
        return _itais_swig.DebugME_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(DebugME_sptr self) -> long"""
        return _itais_swig.DebugME_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(DebugME_sptr self) -> basic_block_sptr"""
        return _itais_swig.DebugME_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(DebugME_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.DebugME_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(DebugME_sptr self) -> std::string"""
        return _itais_swig.DebugME_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(DebugME_sptr self, std::string name)"""
        return _itais_swig.DebugME_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(DebugME_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.DebugME_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(DebugME_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.DebugME_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(DebugME_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.DebugME_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(DebugME_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.DebugME_sptr_message_subscribers(self, which_port)

# Register DebugME_sptr in _itais_swig:
_itais_swig.DebugME_sptr_swigregister(DebugME_sptr)


DebugME_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
DebugME = DebugME.make;

class selector_39(object):
    r"""Proxy of C++ gr::itais::selector_39 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(itemsize: "size_t", input_index: "unsigned int", output_index: "unsigned int") -> "gr::itais::selector_39::sptr":
        r"""make(size_t itemsize, unsigned int input_index, unsigned int output_index) -> selector_39_sptr"""
        return _itais_swig.selector_39_make(itemsize, input_index, output_index)

    def set_enabled(self, enable: "bool") -> "void":
        r"""set_enabled(selector_39 self, bool enable)"""
        return _itais_swig.selector_39_set_enabled(self, enable)

    def enabled(self) -> "bool":
        r"""enabled(selector_39 self) -> bool"""
        return _itais_swig.selector_39_enabled(self)

    def set_input_index(self, input_index: "unsigned int") -> "void":
        r"""set_input_index(selector_39 self, unsigned int input_index)"""
        return _itais_swig.selector_39_set_input_index(self, input_index)

    def input_index(self) -> "int":
        r"""input_index(selector_39 self) -> int"""
        return _itais_swig.selector_39_input_index(self)

    def set_output_index(self, output_index: "unsigned int") -> "void":
        r"""set_output_index(selector_39 self, unsigned int output_index)"""
        return _itais_swig.selector_39_set_output_index(self, output_index)

    def output_index(self) -> "int":
        r"""output_index(selector_39 self) -> int"""
        return _itais_swig.selector_39_output_index(self)
    __swig_destroy__ = _itais_swig.delete_selector_39

# Register selector_39 in _itais_swig:
_itais_swig.selector_39_swigregister(selector_39)

def selector_39_make(itemsize: "size_t", input_index: "unsigned int", output_index: "unsigned int") -> "gr::itais::selector_39::sptr":
    r"""selector_39_make(size_t itemsize, unsigned int input_index, unsigned int output_index) -> selector_39_sptr"""
    return _itais_swig.selector_39_make(itemsize, input_index, output_index)

class selector_39_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::itais::selector_39 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(selector_39_sptr self) -> selector_39_sptr
        __init__(selector_39_sptr self, selector_39 p) -> selector_39_sptr
        """
        _itais_swig.selector_39_sptr_swiginit(self, _itais_swig.new_selector_39_sptr(*args))

    def __deref__(self) -> "gr::itais::selector_39 *":
        r"""__deref__(selector_39_sptr self) -> selector_39"""
        return _itais_swig.selector_39_sptr___deref__(self)
    __swig_destroy__ = _itais_swig.delete_selector_39_sptr

    def make(self, itemsize: "size_t", input_index: "unsigned int", output_index: "unsigned int") -> "gr::itais::selector_39::sptr":
        r"""make(selector_39_sptr self, size_t itemsize, unsigned int input_index, unsigned int output_index) -> selector_39_sptr"""
        return _itais_swig.selector_39_sptr_make(self, itemsize, input_index, output_index)

    def set_enabled(self, enable: "bool") -> "void":
        r"""set_enabled(selector_39_sptr self, bool enable)"""
        return _itais_swig.selector_39_sptr_set_enabled(self, enable)

    def enabled(self) -> "bool":
        r"""enabled(selector_39_sptr self) -> bool"""
        return _itais_swig.selector_39_sptr_enabled(self)

    def set_input_index(self, input_index: "unsigned int") -> "void":
        r"""set_input_index(selector_39_sptr self, unsigned int input_index)"""
        return _itais_swig.selector_39_sptr_set_input_index(self, input_index)

    def input_index(self) -> "int":
        r"""input_index(selector_39_sptr self) -> int"""
        return _itais_swig.selector_39_sptr_input_index(self)

    def set_output_index(self, output_index: "unsigned int") -> "void":
        r"""set_output_index(selector_39_sptr self, unsigned int output_index)"""
        return _itais_swig.selector_39_sptr_set_output_index(self, output_index)

    def output_index(self) -> "int":
        r"""output_index(selector_39_sptr self) -> int"""
        return _itais_swig.selector_39_sptr_output_index(self)

    def history(self) -> "unsigned int":
        r"""history(selector_39_sptr self) -> unsigned int"""
        return _itais_swig.selector_39_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(selector_39_sptr self, int which, int delay)
        declare_sample_delay(selector_39_sptr self, unsigned int delay)
        """
        return _itais_swig.selector_39_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(selector_39_sptr self, int which) -> unsigned int"""
        return _itais_swig.selector_39_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(selector_39_sptr self, int multiple)"""
        return _itais_swig.selector_39_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(selector_39_sptr self) -> int"""
        return _itais_swig.selector_39_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(selector_39_sptr self) -> double"""
        return _itais_swig.selector_39_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(selector_39_sptr self) -> uint64_t"""
        return _itais_swig.selector_39_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(selector_39_sptr self) -> uint64_t"""
        return _itais_swig.selector_39_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(selector_39_sptr self) -> bool"""
        return _itais_swig.selector_39_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(selector_39_sptr self) -> bool"""
        return _itais_swig.selector_39_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(selector_39_sptr self, unsigned int which_input) -> uint64_t"""
        return _itais_swig.selector_39_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(selector_39_sptr self, unsigned int which_output) -> uint64_t"""
        return _itais_swig.selector_39_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(selector_39_sptr self, std::string level)"""
        return _itais_swig.selector_39_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(selector_39_sptr self) -> std::string"""
        return _itais_swig.selector_39_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(selector_39_sptr self) -> int"""
        return _itais_swig.selector_39_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(selector_39_sptr self, int m)"""
        return _itais_swig.selector_39_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(selector_39_sptr self)"""
        return _itais_swig.selector_39_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(selector_39_sptr self) -> bool"""
        return _itais_swig.selector_39_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(selector_39_sptr self, int m)"""
        return _itais_swig.selector_39_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(selector_39_sptr self) -> int"""
        return _itais_swig.selector_39_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(selector_39_sptr self, int i) -> long"""
        return _itais_swig.selector_39_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(selector_39_sptr self, long max_output_buffer)
        set_max_output_buffer(selector_39_sptr self, int port, long max_output_buffer)
        """
        return _itais_swig.selector_39_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(selector_39_sptr self, int i) -> long"""
        return _itais_swig.selector_39_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(selector_39_sptr self, long min_output_buffer)
        set_min_output_buffer(selector_39_sptr self, int port, long min_output_buffer)
        """
        return _itais_swig.selector_39_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(selector_39_sptr self, int which) -> float
        pc_input_buffers_full(selector_39_sptr self) -> pmt_vector_float
        """
        return _itais_swig.selector_39_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(selector_39_sptr self, int which) -> float
        pc_input_buffers_full_avg(selector_39_sptr self) -> pmt_vector_float
        """
        return _itais_swig.selector_39_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(selector_39_sptr self, int which) -> float
        pc_input_buffers_full_var(selector_39_sptr self) -> pmt_vector_float
        """
        return _itais_swig.selector_39_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(selector_39_sptr self, int which) -> float
        pc_output_buffers_full(selector_39_sptr self) -> pmt_vector_float
        """
        return _itais_swig.selector_39_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(selector_39_sptr self, int which) -> float
        pc_output_buffers_full_avg(selector_39_sptr self) -> pmt_vector_float
        """
        return _itais_swig.selector_39_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(selector_39_sptr self, int which) -> float
        pc_output_buffers_full_var(selector_39_sptr self) -> pmt_vector_float
        """
        return _itais_swig.selector_39_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(selector_39_sptr self) -> float"""
        return _itais_swig.selector_39_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(selector_39_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _itais_swig.selector_39_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(selector_39_sptr self)"""
        return _itais_swig.selector_39_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(selector_39_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _itais_swig.selector_39_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(selector_39_sptr self) -> int"""
        return _itais_swig.selector_39_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(selector_39_sptr self) -> int"""
        return _itais_swig.selector_39_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(selector_39_sptr self, int priority) -> int"""
        return _itais_swig.selector_39_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(selector_39_sptr self) -> std::string"""
        return _itais_swig.selector_39_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(selector_39_sptr self) -> std::string"""
        return _itais_swig.selector_39_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(selector_39_sptr self) -> io_signature_sptr"""
        return _itais_swig.selector_39_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(selector_39_sptr self) -> io_signature_sptr"""
        return _itais_swig.selector_39_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(selector_39_sptr self) -> long"""
        return _itais_swig.selector_39_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(selector_39_sptr self) -> basic_block_sptr"""
        return _itais_swig.selector_39_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(selector_39_sptr self, int ninputs, int noutputs) -> bool"""
        return _itais_swig.selector_39_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(selector_39_sptr self) -> std::string"""
        return _itais_swig.selector_39_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(selector_39_sptr self, std::string name)"""
        return _itais_swig.selector_39_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(selector_39_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _itais_swig.selector_39_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(selector_39_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.selector_39_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(selector_39_sptr self) -> swig_pmt_ptr"""
        return _itais_swig.selector_39_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(selector_39_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _itais_swig.selector_39_sptr_message_subscribers(self, which_port)

# Register selector_39_sptr in _itais_swig:
_itais_swig.selector_39_sptr_swigregister(selector_39_sptr)


selector_39_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
selector_39 = selector_39.make;



