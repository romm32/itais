options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: pruebasrecibirsocket
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: eso
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 156.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nfrom datetime import datetime, timedelta\n\
      import time\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Embedded Python Block',   # will show up in GRC\n       \
      \     in_sig=[np.float32],\n            out_sig=[np.float32]\n        )\n  \
      \      # if an attribute with the same name as a parameter is found,\n     \
      \   # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        self.portName = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.portName))\n\
      \        self.set_msg_handler(pmt.intern(\"msg_in\"), self.process_message)\n\
      \        self.lim = 10\n        self.time_elapsed = -1\n        self.variable\
      \ = [-1, -1]\n        \n    def process_message(self, message):\n        # Retrieve\
      \ message payload and save it to a variable\n        self.variable = pmt.to_python(message)\n\
      \        print(\"llego \", self.variable, self.time_elapsed.total_seconds())\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        current_utc_time = datetime.utcnow()\n      \
      \  start_of_minute = current_utc_time.replace(second=0, microsecond=0)\n   \
      \     self.time_elapsed = current_utc_time - start_of_minute\n        milliseconds_elapsed\
      \ = self.time_elapsed.total_seconds() * 1000\n        \n        #if int(self.time_elapsed.total_seconds())%5\
      \ == 0:\n        #    print(self.variable, self.time_elapsed.total_seconds())\n\
      \        #    time.sleep(0.5)\n        \n        output_items[0][:] = input_items[0]\
      \ * 2\n        \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'float', 1), ('msg_in', 'message', 1)], [('0', 'float', 1)], 'Embedded Python
      Block example - a simple multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 204.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nfrom datetime import datetime, timedelta\n\
      \nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self, example_param=1.0):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='Embedded Python Block',   # will show up in GRC\n            in_sig=[np.float32],\n\
      \            out_sig=[np.float32]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.example_param = example_param\n    \
      \    self.portName = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.portName))\n\
      \        self.counter = 0\n        self.lim = 10\n        self.current_slot\
      \ = -1\n        self.slots_per_minute = 2250\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"example: multiply with constant\"\"\"\n    \
      \    current_utc_time = datetime.utcnow()\n        start_of_minute = current_utc_time.replace(second=0,\
      \ microsecond=0)\n        time_elapsed = current_utc_time - start_of_minute\n\
      \        milliseconds_elapsed = time_elapsed.total_seconds() * 1000\n      \
      \  self.current_slot = int((milliseconds_elapsed)*self.slots_per_minute/60000)\
      \ #Cantidad de slots desde que empez\xF3 el minuto.\n        \n        if int(time_elapsed.total_seconds())%5\
      \ == 0:\n            self.counter = self.counter + 1\n            PMT_msg =\
      \ pmt.to_pmt(np.full(2, self.counter).tolist())\n            self.message_port_pub(pmt.intern(self.portName),\
      \ PMT_msg)\n            print(\"enviado \", self.counter, time_elapsed.total_seconds())\n\
      \        \n        output_items[0][:] = input_items[0] * 2\n        \n     \
      \   return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'float', 1)], [('0', 'float', 1), ('msg_out', 'message', 1)], 'Embedded Python
      Block example - a simple multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 216.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 172.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0, '0', epy_block_0, '0']
- [epy_block_0, '0', epy_block_1, '0']
- [epy_block_1, '0', qtgui_time_sink_x_0, '0']
- [epy_block_1, msg_out, epy_block_0, msg_in]

metadata:
  file_format: 1
