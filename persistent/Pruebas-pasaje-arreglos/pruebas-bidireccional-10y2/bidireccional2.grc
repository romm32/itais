options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: pruebita
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: prueba
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 208.0]
    rotation: 0
    state: disabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: esta parte recibe arreglos de dim 10
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '10'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 208.0]
    rotation: 0
    state: disabled
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: complex
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 516.0]
    rotation: 0
    state: disabled
- name: blocks_vector_to_stream_0_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: float
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 300.0]
    rotation: 0
    state: enabled
- name: blocks_vector_to_stream_0_0_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: float
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 396.0]
    rotation: 0
    state: enabled
- name: blocks_vector_to_stream_0_1
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: complex
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 604.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[(np.complex64,10)],\n            out_sig=[np.complex64]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        self.lim = 5\n        self.arr = [0, 0, 0, 0, 0,\
      \ 0, 0, 0, 0, 0]\n\n    def work(self, input_items, output_items):\n       \
      \ \"\"\"example: multiply with constant\"\"\"\n        output_items = input_items[0]\n\
      \        for i in range(2):\n        \tself.arr = np.real(input_items[0][0])\n\
      \n        if self.lim > 0:\n        \tprint(\"sub: \", self.arr)\n        \t\
      self.lim = self.lim - 1\n        \t\n        \t\n        return len(output_items)\n\
      \        \n        \n        \n        \n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 10)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 204.0]
    rotation: 0
    state: disabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[],\n            out_sig=[(np.complex64, 2)]\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        self.lim = 5\n        self.arr = [1, 2]\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        output_items[0][:] = self.arr\n        if self.lim\
      \ > 0:\n                print(\"pub: \", self.arr)\n                self.lim\
      \ = self.lim-1\n        return 2\n"
    affinity: ''
    alias: ''
    comment: esta parte envia arreglos de dim 2
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [], [('0',
      'complex', 2)], 'Embedded Python Block example - a simple multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [144, 524.0]
    rotation: 0
    state: disabled
- name: epy_block_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[],\n            out_sig=[(np.float32, 2)]\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        self.lim = 5\n        self.arr = np.full(2, 33)\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        output_items[0][:] = self.arr\n        if self.lim\
      \ > 0:\n                print(\"pub: \", self.arr)\n                print(output_items)\n\
      \                self.lim = self.lim-1\n        return 2\n"
    affinity: ''
    alias: ''
    comment: esta parte envia arreglos de dim 2
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [], [('0',
      'float', 2)], 'Embedded Python Block example - a simple multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 308.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[],\n            out_sig=[(np.float32, 2)]\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        self.lim = 5\n        self.arr = np.full(2, 33)\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        output_items[0][:] = self.arr\n        if self.lim\
      \ > 0:\n                print(\"pub: \", self.arr)\n                print(output_items)\n\
      \                self.lim = self.lim-1\n        return 2\n"
    affinity: ''
    alias: ''
    comment: esta parte envia arreglos de dim 2
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [], [('0',
      'float', 2)], 'Embedded Python Block example - a simple multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 404.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[],\n            out_sig=[(np.complex64, 2)]\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        self.lim = 5\n        self.arr = [1, 2]\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        output_items[0][:] = self.arr\n        if self.lim\
      \ > 0:\n                print(\"pub: \", self.arr)\n                self.lim\
      \ = self.lim-1\n        return 2\n"
    affinity: ''
    alias: ''
    comment: esta parte envia arreglos de dim 2
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [], [('0',
      'complex', 2)], 'Embedded Python Block example - a simple multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [136, 620.0]
    rotation: 0
    state: disabled
- name: zeromq_pub_sink_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:5610
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 500.0]
    rotation: 0
    state: disabled
- name: zeromq_pub_sink_0_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:5610
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '1'
    type: float
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 276.0]
    rotation: 0
    state: enabled
- name: zeromq_pub_sink_0_0_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:5611
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '1'
    type: float
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 388.0]
    rotation: 0
    state: enabled
- name: zeromq_pub_sink_0_1
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:5611
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 596.0]
    rotation: 0
    state: disabled
- name: zeromq_sub_source_0
  id: zeromq_sub_source
  parameters:
    address: tcp://127.0.0.1:5605
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 188.0]
    rotation: 0
    state: disabled

connections:
- [blocks_stream_to_vector_0, '0', epy_block_0, '0']
- [blocks_vector_to_stream_0, '0', zeromq_pub_sink_0, '0']
- [blocks_vector_to_stream_0_0, '0', zeromq_pub_sink_0_0, '0']
- [blocks_vector_to_stream_0_0_0, '0', zeromq_pub_sink_0_0_0, '0']
- [blocks_vector_to_stream_0_1, '0', zeromq_pub_sink_0_1, '0']
- [epy_block_0, '0', blocks_null_sink_0, '0']
- [epy_block_0_0, '0', blocks_vector_to_stream_0, '0']
- [epy_block_0_0_0, '0', blocks_vector_to_stream_0_0, '0']
- [epy_block_0_0_0_0, '0', blocks_vector_to_stream_0_0_0, '0']
- [epy_block_0_0_1, '0', blocks_vector_to_stream_0_1, '0']
- [zeromq_sub_source_0, '0', blocks_stream_to_vector_0, '0']

metadata:
  file_format: 1
