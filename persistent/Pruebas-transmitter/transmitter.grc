options:
  parameters:
    author: gnuradio
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: transmitter
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: mss
  id: variable
  parameters:
    comment: ''
    value: '5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 20.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '4'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 396.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 232.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 328.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: complex
    vlen: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 196.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_0_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: complex
    vlen: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 292.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nfrom datetime import datetime, timedelta\n\
      \n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self):  # only default arguments here\n  \
      \      \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n\
      \        gr.sync_block.__init__(\n            self,\n            name='transmitter',\
      \   # will show up in GRC\n            in_sig=[(np.complex64,2), (np.complex64,2),\
      \ np.float32],\n            out_sig=[(np.complex64,10), (np.complex64,10), np.float32]\n\
      \        )\n        self.inicio_18 = 0\n        self.inicio_24 = 0\n       \
      \ self.slot_y_puedo = np.zeros(2)\n        self.inicializando = True\n     \
      \   self.slots_per_minute = 2250\n        self.transmitiendo = [False, False]\n\
      \        self.mensaje24_a_transmitir = \"A\"\n        self.primero_en_pedir\
      \ = 0\n        self.prox_18 = -1\n        self.prox_24 = -1\n        self.mensaje\
      \ = 0\n        self.current_slot = -1\n        self.candidatos_18 = np.full(10,\
      \ -1)\n        self.candidatos_24 = np.full(10, -1)\n        self.candidatos\
      \ = np.full(10, -1)\n        self.diff = 400\n        self.es_menor0 = False\n\
      \        self.ultimo_slot = -1\n        self.cambio = False\n        self.canal_actual\
      \ = \"A\"\n        self.transmitio = False\n\n    def slot_selection(self, NTT):\n\
      \        selected = np.random.randint(NTT-187, NTT+187+1, size=10)\n       \
      \ selected = np.array(sorted(selected))\n        if NTT-187 < 0:\n         \
      \   shift = 2250\n            selected = (selected+shift)%2250\n        elif\
      \ NTT+187 > 2250:\n            selected = selected%2250\n        return(selected)\n\
      \    \n    def work(self, input_items, output_items):\n        \"\"\"example:\
      \ multiply with constant\"\"\"\n        if self.canal_actual == \"A\":\n   \
      \         self.slot_y_puedo = input_items[0][0]\n        else:\n           \
      \ self.slot_y_puedo = input_items[1][0]\n\n\n        if self.inicializando:\n\
      \            print(\"inicializando\")\n            time.sleep(60)\n        \
      \    self.inicializando = False\n            \n            current_utc_time\
      \ = datetime.utcnow()\n            start_of_minute = current_utc_time.replace(second=0,\
      \ microsecond=0)\n            time_elapsed = current_utc_time - start_of_minute\n\
      \            milliseconds_elapsed = time_elapsed.total_seconds() * 1000\n  \
      \          self.current_slot = int((milliseconds_elapsed)*self.slots_per_minute/60000)\
      \ #Cantidad de slots desde que empez\xF3 el minuto.\n            \n        \
      \    \n            self.inicio_18 = self.current_slot\n            self.inicio_24\
      \ = self.current_slot\n            self.ultimo_slot = self.current_slot\n  \
      \          \n            print(\"inicializo\")\n            print(\"empiezan\
      \ temporizadores\")\n            print(\"slot \", self.current_slot)\n     \
      \       \n            if input_items[2][0] > 2: #### verificar en qu\xE9 unidad\
      \ nos da la velocidad el gps\n                self.prox_18 = (self.inicio_18\
      \ + 1125)%2250 # transmito cada 30 seg\n            else:\n                self.prox_18\
      \ = (self.inicio_18 + 2250*2) # transmito cada 3 min, ver abajo explicacion\
      \ de por que solo sumo 2 mins\n            print(\"fijo prox 18\", self.prox_18,\
      \ \"ahora es \", self.current_slot)\n            \n            \n          \
      \  if self.mensaje24_a_transmitir == \"A\":\n                self.prox_24 =\
      \ (self.inicio_24 + 2250*5) ### esto se transmite cada 6 minutos. lo que pasa\
      \ es que nosotros\n                                                        \
      \ ### vamos restando en cada minuto que pasa. despues de que pasen 5 minutos,\n\
      \                                                         ### va a ser necesario\
      \ otro minuto entero para transmitir, asi que esto esta\n                  \
      \                                       ### bien asi\n                print(\"\
      fijo prox 240\", self.prox_24, \"ahora es \", self.current_slot)           \
      \                                \n            else:\n                self.prox_24\
      \ = (self.inicio_24) #  + 2250) ### nosotros vamos restando de a 2250 slots.\
      \ si ahora ponemos inicio+2250,\n                                          \
      \              ### indicando que tenemos que transmitir en un minuto, cuando\
      \ pase el minuto\n                                                        ###\
      \ voy a restar 2250, pero espero otro minuto entero para transmitir, y esto\
      \ esta\n                                                        ### mal. por\
      \ eso solo inicio_24 (ese slot, pero del siguiente minuto)\n               \
      \ print(\"fijo prox 241\", self.prox_24, \"ahora es \", self.current_slot)\n\
      \            \n            self.mensaje = 0\n            output_items[2][:]\
      \ = self.mensaje\n        \n        else:\n            current_utc_time = datetime.utcnow()\n\
      \            start_of_minute = current_utc_time.replace(second=0, microsecond=0)\n\
      \            time_elapsed = current_utc_time - start_of_minute\n           \
      \ milliseconds_elapsed = time_elapsed.total_seconds() * 1000\n            self.current_slot\
      \ = int((milliseconds_elapsed)*self.slots_per_minute/60000) #Cantidad de slots\
      \ desde que empez\xF3 el minuto.\n            \n            if self.current_slot\
      \ != self.ultimo_slot:\n                self.ultimo_slot = self.current_slot\n\
      \                self.cambio = True\n            \n            self.mensaje\
      \ = 0 ## no estoy pidiendo ningun mensaje a messages ahora\n            output_items[2][:]\
      \ = self.mensaje\n            \n            if self.prox_18 >= 2250 and self.current_slot\
      \ == (self.prox_18%2250) and self.cambio:\n                self.prox_18 = self.prox_18\
      \ - 2250\n                print(\"queda un minuto menos 18\")\n            \
      \     \n            elif (not self.transmitiendo[0]): ### en un elif porque\
      \ sino podr\xEDa ser que resto 2250 y despu\xE9s se hacen cosas con el n\xFA\
      mero resultante.\n                \n                if self.current_slot ==\
      \ ((self.prox_18-self.diff)%2250): ### and (self.current_slot != self.inicio_18):\n\
      \                ### ver que esto si no podemos analizar todos los slots, es\
      \ un problema. porque capaz nunca miro el slot prox_18-diff\n              \
      \  \n                    if self.prox_18-self.diff < 0:\n                  \
      \      self.es_menor0 = True\n                    if self.es_menor0 or (self.current_slot\
      \ == self.prox_18-self.diff):\n                        self.candidatos_18 =\
      \ self.slot_selection(self.prox_18) #[self.prox_18-5,self.prox_18-4,self.prox_18-3,self.prox_18-2,self.prox_18-1,\
      \ self.prox_18,self.prox_18+1,self.prox_18+2,self.prox_18+3,self.prox_18+4]#\n\
      \                        self.transmitiendo[0] = True\n                    \
      \    print(\"transmitiendo 18\", self.current_slot)\n                      \
      \  if self.primero_en_pedir == 0:\n                            self.primero_en_pedir\
      \ = 18\n                            \n                        self.candidatos\
      \ = self.candidatos_18\n                        if self.canal_actual == \"A\"\
      :\n                            output_items[0][:] = self.candidatos\n      \
      \                      output_items[1][:] = np.full(10, -1)\n              \
      \          else:\n                            output_items[1][:] = self.candidatos\n\
      \                            output_items[0][:] = np.full(10, -1)\n        \
      \                self.es_menor0 = False\n\n            if self.prox_24 >= 2250\
      \ and self.current_slot == (self.prox_24%2250) and self.cambio:\n          \
      \      self.prox_24 = self.prox_24 - 2250       \n                print(\"queda\
      \ un minuto menos 24\") \n\n            elif not self.transmitiendo[1]:\n  \
      \                      \n                if self.current_slot == (self.prox_24-self.diff)%2250:\
      \ ### and (self.current_slot != self.inicio_24): ### ver segunda condicion\n\
      \                    if self.prox_24-self.diff < 0:\n                      \
      \  self.es_menor0 = True\n                    if self.es_menor0 or (self.current_slot\
      \ == self.prox_24-self.diff):\n                        self.candidatos_24 =\
      \ self.slot_selection(self.prox_24) #[self.prox_24-5,self.prox_24-4,self.prox_24-3,self.prox_24-2,self.prox_24-1,\
      \ self.prox_24,self.prox_24+1,self.prox_24+2,self.prox_24+3,self.prox_24+4]\
      \ #\n                        self.transmitiendo[1] = True\n                \
      \        print(\"transmitiendo 24\", self.current_slot)\n                  \
      \      if self.primero_en_pedir == 0:\n                            self.primero_en_pedir\
      \ = 24\n                        \n                        self.candidatos =\
      \ self.candidatos_24\n                        if self.canal_actual == \"A\"\
      :\n                            output_items[0][:] = self.candidatos\n      \
      \                      output_items[1][:] = np.full(10, -1)\n              \
      \          else:\n                            output_items[1][:] = self.candidatos\n\
      \                            output_items[0][:] = np.full(10, -1)\n        \
      \                self.es_menor0 = False\n                        \n        \
      \    \n            if self.transmitiendo[0] and (np.real(self.slot_y_puedo[0])\
      \ in self.candidatos_18) and (np.real(self.slot_y_puedo[1]) == 1) and ((not\
      \ self.slot_y_puedo[0] in self.candidatos_24) or (self.primero_en_pedir == 18))\
      \ and self.current_slot == self.slot_y_puedo[0]:\n                \n       \
      \         self.mensaje = 18 ### mensaje a mandar a messages\n              \
      \  output_items[2][:] = self.mensaje\n                self.transmitiendo[0]\
      \ = False\n                if self.transmitiendo[1]:\n                    self.primero_en_pedir\
      \ = 24\n                else:\n                    self.primero_en_pedir = 0\n\
      \                   \n                self.inicio_18 = np.real(self.slot_y_puedo[0])\
      \ ### que deberia ser igual a current_slot\n                    \n         \
      \       if input_items[2][0] > 2: #### verificar en qu\xE9 unidad nos da la\
      \ velocidad el gps\n                    self.prox_18 = (self.inicio_18 + 1125)%2250\
      \ # transmito cada 30 seg\n                else:\n                    self.prox_18\
      \ = (self.inicio_18 + 2250*2) # transmito cada 3 min    ### ver mod 2250\n \
      \               print(\"fijo prox \", self.prox_18, \"ahora es \", self.current_slot)\n\
      \                    \n                self.candidatos_18 = np.full(10, -1)\n\
      \                    \n                print(\"reinicia 30s\", self.current_slot)\n\
      \                #print(\"slot \", self.current_slot)\n                #print(\"\
      slot y puedo\", self.slot_y_puedo[0])\n                \n                self.slot_y_puedo\
      \ = np.zeros(2)\n                    \n                self.candidatos = np.full(10,\
      \ -1)\n                if self.canal_actual == \"A\":\n                    output_items[0][:]\
      \ = self.candidatos\n                    output_items[1][:] = np.full(10, -1)\n\
      \                    self.transmitio = True\n                else:\n       \
      \             self.transmitio = True\n                    output_items[1][:]\
      \ = self.candidatos\n                    output_items[0][:] = np.full(10, -1)\n\
      \                    \n                \n                        \n        \
      \    if self.transmitiendo[1] and (self.slot_y_puedo[0] in self.candidatos_24)\
      \ and np.real(self.slot_y_puedo[1]) == 1 and (not (self.slot_y_puedo[0] in self.candidatos_18)\
      \ or (self.primero_en_pedir == 24)) and self.current_slot == self.slot_y_puedo[0]:\n\
      \                \n                if self.mensaje24_a_transmitir == \"A\":\n\
      \                    self.mensaje = 240 ### mensaje a mandar a messages, es\
      \ el 24-0 que indica 24-A\n                    output_items[2][:] = self.mensaje\n\
      \                    self.mensaje24_a_transmitir = \"B\"\n                 \
      \       \n                    print(\"Envio mensaje 24 A\")\n              \
      \      print(\"slot \", self.current_slot)\n                else:\n        \
      \            self.mensaje = 241 ### mensaje a mandar a messages, es el 24-1\
      \ que indica 24-B\n                    output_items[2][:] = self.mensaje\n \
      \                   self.mensaje24_a_transmitir = \"A\"\n                  \
      \      \n                    print(\"Envio mensaje 24 B\")\n               \
      \     print(\"slot \", self.current_slot)\n                self.transmitiendo[1]\
      \ = False\n                    \n                if self.transmitiendo[0]:\n\
      \                    self.primero_en_pedir = 18\n                else:\n   \
      \                 self.primero_en_pedir = 0\n                self.inicio_24\
      \ = np.real(self.slot_y_puedo[0]) ### que deberia ser igual a current_slot\n\
      \                    \n                if self.mensaje24_a_transmitir == \"\
      A\":\n                    self.prox_24 = (self.inicio_24 + 2250*5) ### ver modulo\n\
      \                else:\n                    self.prox_24 = (self.inicio_24)\n\
      \                    \n                self.candidatos_24 = np.full(10, -1)\n\
      \                    \n                self.candidatos = np.full(10, -1)\n \
      \               if self.canal_actual == \"A\":\n                    output_items[0][:]\
      \ = self.candidatos\n                    output_items[1][:] = np.full(10, -1)\n\
      \                    self.transmitio = True\n                else:\n       \
      \             output_items[1][:] = self.candidatos\n                    output_items[0][:]\
      \ = np.full(10, -1)\n                    self.transmitio = True\n          \
      \          \n        \n            self.cambio = False\n        if self.canal_actual\
      \ == \"A\":\n            output_items[0][:] = self.candidatos\n            output_items[1][:]\
      \ = np.full(10, -1)\n            if self.transmitio:\n                self.transmitio\
      \ = False\n                self.canal_actual = \"B\"\n        else:\n      \
      \      output_items[0][:] = np.full(10, -1)\n            output_items[1][:]\
      \ = self.candidatos\n            if self.transmitio:\n                self.transmitio\
      \ = False\n                self.canal_actual = \"A\"\n        output_items[2][:]\
      \ = self.mensaje\n        return len(output_items[0])\n        \n        \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('transmitter', 'blk', [], [('0', 'complex', 2), ('1', 'complex', 2),
      ('2', 'float', 1)], [('0', 'complex', 10), ('1', 'complex', 10), ('2', 'float',
      1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 336.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nfrom datetime import datetime, timedelta\n\
      \n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self):  # only default arguments here\n  \
      \      \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n\
      \        gr.sync_block.__init__(\n            self,\n            name='Transmitter',\
      \   # will show up in GRC\n            in_sig=[(np.complex64,2), np.float32],\n\
      \            out_sig=[(np.complex64,10), np.float32]\n        )\n        self.inicio_18\
      \ = 0\n        self.inicio_24 = 0\n        self.slot_y_puedo = np.zeros(2)\n\
      \        self.inicializando = True\n        self.slots_per_minute = 2250\n \
      \       self.transmitiendo = [False, False]\n        self.mensaje24_a_transmitir\
      \ = \"A\"\n        self.primero_en_pedir = 0\n        self.prox_18 = -1\n  \
      \      self.prox_24 = -1\n        self.mensaje = 0\n        self.current_slot\
      \ = -1\n        self.candidatos_18 = np.full(10, -1)\n        self.candidatos_24\
      \ = np.full(10, -1)\n        self.candidatos = np.full(10, -1)\n        self.diff\
      \ = 400\n        self.es_menor0 = False\n        self.ultimo_slot = -1\n   \
      \     self.cambio = False\n\n    def slot_selection(self, NTT):\n        selected\
      \ = np.random.randint(NTT-187, NTT+187+1, size=10)\n        selected = np.array(sorted(selected))\n\
      \        if NTT-187 < 0:\n            shift = 2250\n            selected = (selected+shift)%2250\n\
      \        elif NTT+187 > 2250:\n            selected = selected%2250\n      \
      \  return(selected)\n    \n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        self.slot_y_puedo\
      \ = input_items[0][0]\n        \n        if self.inicializando:\n          \
      \  print(\"inicializando\")\n            time.sleep(60)\n            self.inicializando\
      \ = False\n            \n            current_utc_time = datetime.utcnow()\n\
      \            start_of_minute = current_utc_time.replace(second=0, microsecond=0)\n\
      \            time_elapsed = current_utc_time - start_of_minute\n           \
      \ milliseconds_elapsed = time_elapsed.total_seconds() * 1000\n            self.current_slot\
      \ = int((milliseconds_elapsed)*self.slots_per_minute/60000) #Cantidad de slots\
      \ desde que empez\xF3 el minuto.\n            \n            \n            self.inicio_18\
      \ = self.current_slot\n            self.inicio_24 = self.current_slot\n    \
      \        self.ultimo_slot = self.current_slot\n            \n            print(\"\
      inicializo\")\n            print(\"empiezan temporizadores\")\n            print(\"\
      slot \", self.current_slot)\n            \n            if input_items[1][0]\
      \ > 2: #### verificar en qu\xE9 unidad nos da la velocidad el gps\n        \
      \        self.prox_18 = (self.inicio_18 + 1125)%2250 # transmito cada 30 seg\n\
      \            else:\n                self.prox_18 = (self.inicio_18 + 2250*2)\
      \ # transmito cada 3 min, ver abajo explicacion de por que solo sumo 2 mins\n\
      \            print(\"fijo prox 18\", self.prox_18, \"ahora es \", self.current_slot)\n\
      \            \n            \n            if self.mensaje24_a_transmitir == \"\
      A\":\n                self.prox_24 = (self.inicio_24 + 2250*5) ### esto se transmite\
      \ cada 6 minutos. lo que pasa es que nosotros\n                            \
      \                             ### vamos restando en cada minuto que pasa. despues\
      \ de que pasen 5 minutos,\n                                                \
      \         ### va a ser necesario otro minuto entero para transmitir, asi que\
      \ esto esta\n                                                         ### bien\
      \ asi\n                print(\"fijo prox 240\", self.prox_24, \"ahora es \"\
      , self.current_slot)                                           \n          \
      \  else:\n                self.prox_24 = (self.inicio_24) #  + 2250) ### nosotros\
      \ vamos restando de a 2250 slots. si ahora ponemos inicio+2250,\n          \
      \                                              ### indicando que tenemos que\
      \ transmitir en un minuto, cuando pase el minuto\n                         \
      \                               ### voy a restar 2250, pero espero otro minuto\
      \ entero para transmitir, y esto esta\n                                    \
      \                    ### mal. por eso solo inicio_24 (ese slot, pero del siguiente\
      \ minuto)\n                print(\"fijo prox 241\", self.prox_24, \"ahora es\
      \ \", self.current_slot)\n            \n            self.mensaje = 0\n     \
      \       output_items[1][:] = self.mensaje\n        \n        else:\n       \
      \     current_utc_time = datetime.utcnow()\n            start_of_minute = current_utc_time.replace(second=0,\
      \ microsecond=0)\n            time_elapsed = current_utc_time - start_of_minute\n\
      \            milliseconds_elapsed = time_elapsed.total_seconds() * 1000\n  \
      \          self.current_slot = int((milliseconds_elapsed)*self.slots_per_minute/60000)\
      \ #Cantidad de slots desde que empez\xF3 el minuto.\n            \n        \
      \    if self.current_slot != self.ultimo_slot:\n                self.ultimo_slot\
      \ = self.current_slot\n                self.cambio = True\n            \n  \
      \          self.mensaje = 0 ## no estoy pidiendo ningun mensaje a messages ahora\n\
      \            output_items[1][:] = self.mensaje\n            \n            if\
      \ self.prox_18 >= 2250 and self.current_slot == (self.prox_18%2250) and self.cambio:\n\
      \                self.prox_18 = self.prox_18 - 2250\n                print(\"\
      queda un minuto menos 18\")\n                 \n            elif (not self.transmitiendo[0]):\
      \ ### en un elif porque sino podr\xEDa ser que resto 2250 y despu\xE9s se hacen\
      \ cosas con el n\xFAmero resultante.\n                \n                if self.current_slot\
      \ == ((self.prox_18-self.diff)%2250): ### and (self.current_slot != self.inicio_18):\n\
      \                ### ver que esto si no podemos analizar todos los slots, es\
      \ un problema. porque capaz nunca miro el slot prox_18-diff\n              \
      \  \n                    if self.prox_18-self.diff < 0:\n                  \
      \      self.es_menor0 = True\n                    if self.es_menor0 or (self.current_slot\
      \ == self.prox_18-self.diff):\n                        self.candidatos_18 =\
      \ self.slot_selection(self.prox_18) #[self.prox_18-5,self.prox_18-4,self.prox_18-3,self.prox_18-2,self.prox_18-1,\
      \ self.prox_18,self.prox_18+1,self.prox_18+2,self.prox_18+3,self.prox_18+4]#\n\
      \                        self.transmitiendo[0] = True\n                    \
      \    print(\"transmitiendo 18\", self.current_slot)\n                      \
      \  if self.primero_en_pedir == 0:\n                            self.primero_en_pedir\
      \ = 18\n                            \n                        self.candidatos\
      \ = self.candidatos_18\n                        output_items[0][:] = self.candidatos\n\
      \                        self.es_menor0 = False\n\n            if self.prox_24\
      \ >= 2250 and self.current_slot == (self.prox_24%2250) and self.cambio:\n  \
      \              self.prox_24 = self.prox_24 - 2250       \n                print(\"\
      queda un minuto menos 24\") \n\n            elif not self.transmitiendo[1]:\n\
      \                        \n                if self.current_slot == (self.prox_24-self.diff)%2250:\
      \ ### and (self.current_slot != self.inicio_24): ### ver segunda condicion\n\
      \                    if self.prox_24-self.diff < 0:\n                      \
      \  self.es_menor0 = True\n                    if self.es_menor0 or (self.current_slot\
      \ == self.prox_24-self.diff):\n                        self.candidatos_24 =\
      \ self.slot_selection(self.prox_24) #[self.prox_24-5,self.prox_24-4,self.prox_24-3,self.prox_24-2,self.prox_24-1,\
      \ self.prox_24,self.prox_24+1,self.prox_24+2,self.prox_24+3,self.prox_24+4]\
      \ #\n                        self.transmitiendo[1] = True\n                \
      \        print(\"transmitiendo 24\", self.current_slot)\n                  \
      \      if self.primero_en_pedir == 0:\n                            self.primero_en_pedir\
      \ = 24\n                        \n                        self.candidatos =\
      \ self.candidatos_24\n                        output_items[0][:] = self.candidatos\n\
      \                        self.es_menor0 = False\n                        \n\
      \            \n            if self.transmitiendo[0] and (np.real(self.slot_y_puedo[0])\
      \ in self.candidatos_18) and (np.real(self.slot_y_puedo[1]) == 1) and ((not\
      \ self.slot_y_puedo[0] in self.candidatos_24) or (self.primero_en_pedir == 18))\
      \ and self.current_slot == self.slot_y_puedo[0]:\n                \n       \
      \         self.mensaje = 18 ### mensaje a mandar a messages\n              \
      \  output_items[1][:] = self.mensaje\n                self.transmitiendo[0]\
      \ = False\n                if self.transmitiendo[1]:\n                    self.primero_en_pedir\
      \ = 24\n                else:\n                    self.primero_en_pedir = 0\n\
      \                   \n                self.inicio_18 = np.real(self.slot_y_puedo[0])\
      \ ### que deberia ser igual a current_slot\n                    \n         \
      \       if input_items[1][0] > 2: #### verificar en qu\xE9 unidad nos da la\
      \ velocidad el gps\n                    self.prox_18 = (self.inicio_18 + 1125)%2250\
      \ # transmito cada 30 seg\n                else:\n                    self.prox_18\
      \ = (self.inicio_18 + 2250*2) # transmito cada 3 min    ### ver mod 2250\n \
      \               print(\"fijo prox \", self.prox_18, \"ahora es \", self.current_slot)\n\
      \                    \n                self.candidatos_18 = np.full(10, -1)\n\
      \                    \n                print(\"reinicia 30s\", self.current_slot)\n\
      \                #print(\"slot \", self.current_slot)\n                #print(\"\
      slot y puedo\", self.slot_y_puedo[0])\n                \n                self.slot_y_puedo\
      \ = np.zeros(2)\n                    \n                self.candidatos = np.full(10,\
      \ -1)\n                output_items[0][:] = self.candidatos\n              \
      \      \n                    \n                \n                        \n\
      \            if self.transmitiendo[1] and (self.slot_y_puedo[0] in self.candidatos_24)\
      \ and np.real(self.slot_y_puedo[1]) == 1 and (not (self.slot_y_puedo[0] in self.candidatos_18)\
      \ or (self.primero_en_pedir == 24)) and self.current_slot == self.slot_y_puedo[0]:\n\
      \                \n                if self.mensaje24_a_transmitir == \"A\":\n\
      \                    self.mensaje = 240 ### mensaje a mandar a messages, es\
      \ el 24-0 que indica 24-A\n                    output_items[1][:] = self.mensaje\n\
      \                    self.mensaje24_a_transmitir = \"B\"\n                 \
      \       \n                    print(\"Envio mensaje 24 A\")\n              \
      \      print(\"slot \", self.current_slot)\n                else:\n        \
      \            self.mensaje = 241 ### mensaje a mandar a messages, es el 24-1\
      \ que indica 24-B\n                    output_items[1][:] = self.mensaje\n \
      \                   self.mensaje24_a_transmitir = \"A\"\n                  \
      \      \n                    print(\"Envio mensaje 24 B\")\n               \
      \     print(\"slot \", self.current_slot)\n                self.transmitiendo[1]\
      \ = False\n                    \n                if self.transmitiendo[0]:\n\
      \                    self.primero_en_pedir = 18\n                else:\n   \
      \                 self.primero_en_pedir = 0\n                self.inicio_24\
      \ = np.real(self.slot_y_puedo[0]) ### que deberia ser igual a current_slot\n\
      \                    \n                if self.mensaje24_a_transmitir == \"\
      A\":\n                    self.prox_24 = (self.inicio_24 + 2250*5) ### ver modulo\n\
      \                else:\n                    self.prox_24 = (self.inicio_24)\n\
      \                    \n                self.candidatos_24 = np.full(10, -1)\n\
      \                    \n                self.candidatos = np.full(10, -1)\n \
      \               output_items[0][:] = self.candidatos\n                    \n\
      \        \n            self.cambio = False\n        output_items[0][:] = self.candidatos\n\
      \        output_items[1][:] = self.mensaje\n        return len(output_items[0])\n\
      \        \n        \n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Transmitter', 'blk', [], [('0', 'complex', 2), ('1', 'float', 1)],
      [('0', 'complex', 10), ('1', 'float', 1)], 'Embedded Python Block example -
      a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 272.0]
    rotation: 0
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[np.float32],\n            out_sig=[]\n        )\n     \
      \   # if an attribute with the same name as a parameter is found,\n        #\
      \ a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        self.lim = 6000\n        self.primera18 = True\n\
      \        self.primera240 = True\n        self.primera241 = True\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n        if (18 in input_items[0] or 240 in input_items[0] or 241 in input_items[0])\
      \ and self.lim >0:\n            if 18 in input_items[0] and self.primera18:\n\
      \                print(\"llego 18\")\n                self.primera18 = False\n\
      \            elif 240 in input_items[0] and self.primera240:\n             \
      \   print(\"llego 240\")\n                self.primera240 = False\n        \
      \    \n            elif 241 in input_items[0] and self.primera241:\n       \
      \         print(\"llego 241\")\n                self.primera241 = False\n  \
      \          self.lim -= 1\n            \n        if self.lim == 0:\n        \
      \    self.lim = 3000\n            self.primera18 = True\n            self.primera240\
      \ = True\n            self.primera241 = True\n\n        return 2\n        \n\
      \        \n        \n        \n        \n        \n        \n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'float', 1)], [], 'Embedded Python Block example - a simple multiply const',
      ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 404.0]
    rotation: 0
    state: true
- name: zeromq_pub_sink_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:5605
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: mss
    type: complex
    vlen: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 124.0]
    rotation: 0
    state: true
- name: zeromq_pub_sink_0_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:5606
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: mss
    type: complex
    vlen: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 276.0]
    rotation: 0
    state: true
- name: zeromq_sub_source_0
  id: zeromq_sub_source
  parameters:
    address: tcp://127.0.0.1:5610
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: mss
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [70, 229]
    rotation: 0
    state: true
- name: zeromq_sub_source_0_0
  id: zeromq_sub_source
  parameters:
    address: tcp://127.0.0.1:5611
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: mss
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 324.0]
    rotation: 0
    state: true

connections:
- [analog_const_source_x_0, '0', epy_block_0, '2']
- [analog_const_source_x_0, '0', epy_block_0_0, '1']
- [blocks_stream_to_vector_0, '0', epy_block_0, '0']
- [blocks_stream_to_vector_0, '0', epy_block_0_0, '0']
- [blocks_stream_to_vector_0_0, '0', epy_block_0, '1']
- [blocks_vector_to_stream_0, '0', zeromq_pub_sink_0, '0']
- [blocks_vector_to_stream_0_0, '0', zeromq_pub_sink_0_0, '0']
- [epy_block_0, '0', blocks_vector_to_stream_0, '0']
- [epy_block_0, '1', blocks_vector_to_stream_0_0, '0']
- [epy_block_0, '2', epy_block_1, '0']
- [epy_block_0_0, '0', blocks_vector_to_stream_0, '0']
- [epy_block_0_0, '1', epy_block_1, '0']
- [zeromq_sub_source_0, '0', blocks_stream_to_vector_0, '0']
- [zeromq_sub_source_0_0, '0', blocks_stream_to_vector_0_0, '0']

metadata:
  file_format: 1
